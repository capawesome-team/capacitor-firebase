{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport type {\n  ListOptions,\n  SettableMetadata,\n  UploadMetadata,\n  UploadTaskSnapshot,\n} from 'firebase/storage';\nimport {\n  connectStorageEmulator,\n  deleteObject,\n  getDownloadURL,\n  getMetadata,\n  getStorage,\n  list,\n  ref,\n  updateMetadata,\n  uploadBytesResumable,\n} from 'firebase/storage';\n\nimport type {\n  DeleteFileOptions,\n  FirebaseStoragePlugin,\n  GetDownloadUrlOptions,\n  GetDownloadUrlResult,\n  GetMetadataOptions,\n  GetMetadataResult,\n  ListFilesOptions,\n  ListFilesResult,\n  UpdateMetadataOptions,\n  UploadFileCallback,\n  UploadFileCallbackEvent,\n  UploadFileOptions,\n  UseEmulatorOptions,\n} from './definitions';\n\nexport class FirebaseStorageWeb\n  extends WebPlugin\n  implements FirebaseStoragePlugin\n{\n  public static readonly ERROR_BLOB_MISSING = 'blob must be provided.';\n\n  public async deleteFile(options: DeleteFileOptions): Promise<void> {\n    const storage = getStorage();\n    const storageRef = ref(storage, options.path);\n    await deleteObject(storageRef);\n  }\n\n  public async getDownloadUrl(\n    options: GetDownloadUrlOptions,\n  ): Promise<GetDownloadUrlResult> {\n    const storage = getStorage();\n    const storageRef = ref(storage, options.path);\n    const downloadUrl = await getDownloadURL(storageRef);\n    return { downloadUrl };\n  }\n\n  public async getMetadata(\n    options: GetMetadataOptions,\n  ): Promise<GetMetadataResult> {\n    const storage = getStorage();\n    const storageRef = ref(storage, options.path);\n    const metadata = await getMetadata(storageRef);\n    const result: GetMetadataResult = {\n      bucket: metadata.bucket,\n      createdAt: new Date(metadata.timeCreated).getTime(),\n      generation: metadata.generation,\n      metadataGeneration: metadata.metageneration,\n      name: metadata.name,\n      path: metadata.fullPath,\n      size: metadata.size,\n      updatedAt: new Date(metadata.updated).getTime(),\n      cacheControl: metadata.cacheControl,\n      contentDisposition: metadata.contentDisposition,\n      contentEncoding: metadata.contentEncoding,\n      contentLanguage: metadata.contentLanguage,\n      contentType: metadata.contentType,\n      customMetadata: metadata.customMetadata,\n    };\n    if (metadata.md5Hash) {\n      result.md5Hash = metadata.md5Hash;\n    }\n    return result;\n  }\n\n  public async listFiles(options: ListFilesOptions): Promise<ListFilesResult> {\n    const storage = getStorage();\n    const storageRef = ref(storage, options.path);\n    const listOptions: ListOptions = {\n      maxResults: options.maxResults,\n      pageToken: options.pageToken,\n    };\n    const listResult = await list(storageRef, listOptions);\n    const result: ListFilesResult = {\n      items: listResult.items.map(item => ({\n        bucket: item.bucket,\n        name: item.name,\n        path: item.fullPath,\n      })),\n    };\n    if (listResult.nextPageToken) {\n      result.nextPageToken = listResult.nextPageToken;\n    }\n    return result;\n  }\n\n  public async updateMetadata(options: UpdateMetadataOptions): Promise<void> {\n    const storage = getStorage();\n    const storageRef = ref(storage, options.path);\n    const metadata: SettableMetadata = {\n      cacheControl: options.metadata.cacheControl,\n      contentDisposition: options.metadata.contentDisposition,\n      contentEncoding: options.metadata.contentEncoding,\n      contentLanguage: options.metadata.contentLanguage,\n      contentType: options.metadata.contentType,\n      customMetadata: options.metadata.customMetadata,\n    };\n    await updateMetadata(storageRef, metadata);\n  }\n\n  public async uploadFile(\n    options: UploadFileOptions,\n    callback: UploadFileCallback,\n  ): Promise<string> {\n    if (!options.blob) {\n      throw new Error(FirebaseStorageWeb.ERROR_BLOB_MISSING);\n    }\n    const storage = getStorage();\n    const storageRef = ref(storage, options.path);\n    let metadata: UploadMetadata | undefined;\n    if (options.metadata) {\n      metadata = {\n        cacheControl: options.metadata.cacheControl,\n        contentDisposition: options.metadata.contentDisposition,\n        contentEncoding: options.metadata.contentEncoding,\n        contentLanguage: options.metadata.contentLanguage,\n        contentType: options.metadata.contentType,\n        md5Hash: options.metadata.md5Hash,\n        customMetadata: options.metadata.customMetadata,\n      };\n    }\n    const uploadTask = uploadBytesResumable(storageRef, options.blob, metadata);\n    uploadTask.on('state_changed', {\n      next: snapshot => {\n        const result = this.createUploadFileCallbackEvent(snapshot);\n        callback(result, undefined);\n      },\n      error: error => {\n        callback(null, error);\n      },\n      complete: () => {\n        const result = this.createUploadFileCallbackEvent(uploadTask.snapshot);\n        callback(result, undefined);\n      },\n    });\n    return Date.now().toString();\n  }\n\n  public async useEmulator(options: UseEmulatorOptions): Promise<void> {\n    const storage = getStorage();\n    const port = options.port || 9199;\n    connectStorageEmulator(storage, options.host, port);\n  }\n\n  private createUploadFileCallbackEvent(\n    snapshot: UploadTaskSnapshot,\n  ): UploadFileCallbackEvent {\n    const result: UploadFileCallbackEvent = {\n      progress: snapshot.bytesTransferred / snapshot.totalBytes,\n      bytesTransferred: snapshot.bytesTransferred,\n      totalBytes: snapshot.totalBytes,\n      completed: snapshot.state === 'success',\n    };\n    return result;\n  }\n}\n"]}
{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["export interface FirebaseStoragePlugin {\n  /**\n   * Delete a file.\n   *\n   * @since 5.3.0\n   */\n  deleteFile(options: DeleteFileOptions): Promise<void>;\n  /**\n   * Get the download url for a file.\n   *\n   * @since 5.3.0\n   */\n  getDownloadUrl(options: GetDownloadUrlOptions): Promise<GetDownloadUrlResult>;\n  /**\n   * Get the metadata for a file.\n   *\n   * @since 5.3.0\n   */\n  getMetadata(options: GetMetadataOptions): Promise<GetMetadataResult>;\n  /**\n   * List files in a directory.\n   *\n   * @since 5.3.0\n   */\n  listFiles(options: ListFilesOptions): Promise<ListFilesResult>;\n  /**\n   * Update the metadata for a file.\n   *\n   * @since 5.3.0\n   */\n  updateMetadata(options: UpdateMetadataOptions): Promise<void>;\n  /**\n   * Upload a file.\n   *\n   * @since 5.3.0\n   */\n  uploadFile(\n    options: UploadFileOptions,\n    callback: UploadFileCallback,\n  ): Promise<CallbackId>;\n  /**\n   * Instrument your app to talk to the Cloud Storage emulator.\n   *\n   * On Android, the cleartext traffic must be allowed. On the Capacitor configuration:\n   * ```\n   * {\n   *   server: {\n   *     cleartext: true\n   *   }\n   * }\n   * ```\n   * **The cleartext traffic is not intended for use in production.**\n   *\n   * @since 6.1.0\n   */\n  useEmulator(options: UseEmulatorOptions): Promise<void>;\n}\n\n/**\n * @since 5.3.0\n */\nexport interface DeleteFileOptions {\n  /**\n   * The full path to the file to delete, including the file name.\n   *\n   * @since 5.3.0\n   * @example 'mountains.png'\n   * @example 'images/mountains.png'\n   */\n  path: string;\n}\n\n/**\n * @since 5.3.0\n */\nexport interface GetDownloadUrlOptions {\n  /**\n   * The full path to the file to get the download url for, including the file name.\n   *\n   * @since 5.3.0\n   * @example 'mountains.png'\n   * @example 'images/mountains.png'\n   */\n  path: string;\n}\n\n/**\n * @since 5.3.0\n */\nexport interface GetDownloadUrlResult {\n  /**\n   * The download url for the file.\n   *\n   * @since 5.3.0\n   */\n  downloadUrl: string;\n}\n\n/**\n * @since 5.3.0\n */\nexport interface GetMetadataOptions {\n  /**\n   * The full path to the file to get the metadata for, including the file name.\n   *\n   * @since 5.3.0\n   * @example 'mountains.png'\n   * @example 'images/mountains.png'\n   */\n  path: string;\n}\n\n/**\n * @since 5.3.0\n */\nexport interface GetMetadataResult {\n  /**\n   * The bucket this file is contained in.\n   *\n   * @since 5.3.0\n   */\n  bucket: string;\n  /**\n   * The timestamp at which the file was created in milliseconds since the epoch.\n   *\n   * @since 5.3.0\n   * @example 1697304435933\n   */\n  createdAt?: number;\n  /**\n   * The object's generation.\n   *\n   * @since 5.3.0\n   * @see https://cloud.google.com/storage/docs/metadata#generation-number\n   */\n  generation: string;\n  /**\n   * The md5 hash of the file.\n   *\n   * @since 5.3.0\n   */\n  md5Hash?: string;\n  /**\n   * The object's metadata generation.\n   *\n   * @since 5.3.0\n   * @see https://cloud.google.com/storage/docs/metadata#generation-number\n   */\n  metadataGeneration: string;\n  /**\n   * The short name of this file, which is the last component of the full path.\n   *\n   * @since 5.3.0\n   * @example 'mountains.png'\n   */\n  name?: string;\n  /**\n   * The full path to the file, including the file name.\n   *\n   * @since 5.3.0\n   * @example 'images/mountains.png'\n   */\n  path?: string;\n  /**\n   * The size of the file in bytes.\n   *\n   * @since 5.3.0\n   */\n  size: number;\n  /**\n   * The timestamp at which the file was last updated in milliseconds since the epoch.\n   *\n   * @since 5.3.0\n   * @example 1697304435933\n   */\n  updatedAt: number;\n  /**\n   * Served as the `Cache-Control` header on object download.\n   *\n   * @since 6.1.0\n   */\n  cacheControl?: string;\n  /**\n   * Served as the `Content-Disposition` header on object download.\n   *\n   * @since 6.1.0\n   */\n  contentDisposition?: string;\n  /**\n   * Served as the `Content-Encoding` header on object download.\n   *\n   * @since 6.1.0\n   */\n  contentEncoding?: string;\n  /**\n   * Served as the `Content-Language` header on object download.\n   *\n   * @since 6.1.0\n   */\n  contentLanguage?: string;\n  /**\n   * Served as the `Content-Type` header on object download.\n   *\n   * @since 6.1.0\n   */\n  contentType?: string;\n  /**\n   * Additional user-defined custom metadata.\n   *\n   * @since 6.1.0\n   */\n  customMetadata?: { [key: string]: string };\n}\n\n/**\n * @since 5.3.0\n */\nexport interface ListFilesOptions {\n  /**\n   * The full path to the directory to list files for.\n   *\n   * @since 5.3.0\n   */\n  path: string;\n  /**\n   * The maximum number of results to return.\n   *\n   * @since 5.3.0\n   * @default 1000\n   */\n  maxResults?: number;\n  /**\n   * The page token, returned by a previous call to this method.\n   * If provided, listing is resumed from the previous position.\n   *\n   * @since 5.3.0\n   */\n  pageToken?: string;\n}\n\n/**\n * @since 5.3.0\n */\nexport interface ListFilesResult {\n  /**\n   * The list of files in the directory.\n   *\n   * @since 5.3.0\n   */\n  items: StorageReference[];\n  /**\n   * If set, there might be more results for this list.\n   * Use this token to resume the list.\n   *\n   * @since 5.3.0\n   */\n  nextPageToken?: string;\n}\n\n/**\n * @since 5.3.0\n */\nexport interface StorageReference {\n  /**\n   * The bucket this file is contained in.\n   *\n   * @since 5.3.0\n   */\n  bucket: string;\n  /**\n   * The full path to the file, including the file name.\n   *\n   * @since 5.3.0\n   * @example 'images/mountains.png'\n   */\n  path: string;\n  /**\n   * The short name of this file, which is the last component of the full path.\n   *\n   * @since 5.3.0\n   * @example 'mountains.png'\n   */\n  name: string;\n}\n\n/**\n * @since 5.3.0\n */\nexport interface UpdateMetadataOptions {\n  /**\n   * The full path to the file to update the metadata for, including the file name.\n   *\n   * @since 5.3.0\n   */\n  path: string;\n  /**\n   * The metadata to update.\n   *\n   * @since 5.3.0\n   */\n  metadata: SettableMetadata;\n}\n\n/**\n * @since 6.1.0\n */\nexport interface UseEmulatorOptions {\n  /**\n   * The emulator host without any port or scheme.\n   *\n   * Note when using a Android Emulator device: 10.0.2.2 is the special IP address to connect to the 'localhost' of the host computer.\n   *\n   * @since 6.1.0\n   * @example \"127.0.0.1\"\n   */\n  host: string;\n  /**\n   * The emulator port.\n   *\n   * @since 6.1.0\n   * @default 9199\n   * @example 9199\n   */\n  port?: number;\n}\n\n/**\n * @since 5.3.0\n */\nexport interface SettableMetadata {\n  /**\n   * Served as the `Cache-Control` header on object download.\n   *\n   * @since 5.3.0\n   */\n  cacheControl?: string;\n  /**\n   * Served as the `Content-Disposition` header on object download.\n   *\n   * @since 5.3.0\n   */\n  contentDisposition?: string;\n  /**\n   * Served as the `Content-Encoding` header on object download.\n   *\n   * @since 5.3.0\n   */\n  contentEncoding?: string;\n  /**\n   * Served as the `Content-Language` header on object download.\n   *\n   * @since 5.3.0\n   */\n  contentLanguage?: string;\n  /**\n   * Served as the `Content-Type` header on object download.\n   *\n   * @since 5.3.0\n   */\n  contentType?: string;\n  /**\n   * Additional user-defined custom metadata.\n   *\n   * @since 5.3.0\n   */\n  customMetadata?: { [key: string]: string };\n}\n\n/**\n * @since 5.4.0\n */\nexport interface UploadMetadata extends SettableMetadata {\n  /**\n   * The base64-encoded MD5 hash of the file.\n   *\n   * Only available for Web.\n   *\n   * @since 5.4.0\n   */\n  md5Hash?: string;\n}\n\n/**\n * @since 5.3.0\n */\nexport interface UploadFileOptions {\n  /**\n   * The data to upload.\n   *\n   * Only available for Web.\n   *\n   * @since 5.3.0\n   */\n  blob?: Blob;\n  /**\n   * The full path where data should be uploaded, including the file name.\n   *\n   * @since 5.3.0\n   * @example 'mountains.png'\n   * @example 'images/mountains.png'\n   */\n  path: string;\n  /**\n   * The uri to the file to upload.\n   *\n   * Only available for Android and iOS.\n   *\n   * @since 5.3.0\n   * @example 'content://com.google.android.apps.photos.contentprovider/-1/1/content://media/external/images/media/1000000214/ORIGINAL/NONE/image/png/mountains'\n   * @example 'file:///var/mobile/Containers/Data/Application/E397A70D-67E4-4258-236E-W1D9E12111D4/Library/Caches/092F8464-DE60-40B3-8A23-EB83160D9F9F/mountains.png'\n   */\n  uri?: string;\n  /**\n   * The metadata to set for the file.\n   *\n   * @since 5.4.0\n   */\n  metadata?: UploadMetadata;\n}\n\n/**\n * @since 5.3.0\n */\nexport type UploadFileCallback = (\n  event: UploadFileCallbackEvent | null,\n  error: any,\n) => void;\n\n/**\n * @since 5.3.0\n */\nexport interface UploadFileCallbackEvent {\n  /**\n   * The upload progress, as a percentage between 0 and 1.\n   *\n   * @since 5.3.0\n   * @example 0.5\n   */\n  progress: number;\n  /**\n   * The number of bytes that have been transferred.\n   *\n   * Only available for Android and Web.\n   *\n   * @since 5.3.0\n   * @example 1000\n   */\n  bytesTransferred?: number;\n  /**\n   * The total number of bytes to be transferred.\n   *\n   * Only available for Android and Web.\n   *\n   * @since 5.3.0\n   * @example 2000\n   */\n  totalBytes?: number;\n  /**\n   * Whether the upload is completed or not.\n   *\n   * @since 5.3.0\n   * @example true\n   */\n  completed: boolean;\n}\n\n/**\n * @since 5.3.0\n */\nexport type CallbackId = string;\n"]}
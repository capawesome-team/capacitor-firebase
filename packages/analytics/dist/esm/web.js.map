{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAgB5C,MAAM,OAAO,oBACX,SAAQ,SAAS;IAGV,KAAK,CAAC,eAAe;QAC1B,OAAO,EAAE,CAAC;IACZ,CAAC;IAEM,KAAK,CAAC,gBAAgB;QAC3B,uDAAuD;QACvD,OAAO,EAAE,CAAA;IACX,CAAC;IAEM,KAAK,CAAC,UAAU,CAAC,QAA2B;QACjD,OAAO;QACP,sCAAsC;QACtC,qEAAqE;QACrE,+CAA+C;QAC/C,0BAA0B;QAC1B,wCAAwC;QACxC,mDAAmD;QACnD,aAAa;QACb,gCAAgC;QAChC,2CAA2C;QAC3C,aAAa;QACb,iCAAiC;QACjC,6CAA6C;QAC7C,aAAa;QACb,uCAAuC;QACvC,kDAAkD;QAClD,aAAa;QACb,2CAA2C;QAC3C,sDAAsD;QACtD,aAAa;QACb,6CAA6C;QAC7C,wDAAwD;QACxD,aAAa;QACb,IAAI;QACJ,+BAA+B;IACjC,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,QAA0B;QAC/C,oCAAoC;QACpC,wCAAwC;QACxC,OAAO;IACT,CAAC;IAEM,KAAK,CAAC,eAAe,CAAC,QAAgC;QAC3D,oCAAoC;QACpC,iCAAiC;QACjC,kCAAkC;QAClC,MAAM;QACN,OAAO;IACT,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAC3B,QAAiC;QAEjC,oCAAoC;QACpC,uCAAuC;QACvC,sDAAsD;QACtD,qEAAqE;QACrE,MAAM;QACN,OAAO;IACT,CAAC;IAEM,KAAK,CAAC,QAAQ,CAAC,QAAyB;QAC7C,oCAAoC;QACpC,qDAAqD;QACrD,OAAO;IACT,CAAC;IAEM,KAAK,CAAC,yBAAyB,CACpC,QAA0C;QAE1C,uDAAuD;QACvD,OAAO;IACT,CAAC;IAEM,KAAK,CAAC,UAAU,CAAC,QAA2B;QACjD,oCAAoC;QACpC,8DAA8D;QAC9D,OAAO;IACT,CAAC;IAEM,KAAK,CAAC,SAAS;QACpB,sEAAsE;QACtE,WAAW;QACX,aAAa;QACb,KAAK;QACL,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IAC3B,CAAC;IAEM,KAAK,CAAC,kBAAkB;QAC7B,uDAAuD;QACvD,OAAO;IACT,CAAC;CACF","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  FirebaseAnalyticsPlugin,\n  GetAppInstanceIdResult,\n  GetSessionIdResult,\n  IsEnabledResult,\n  LogEventOptions,\n  SetConsentOptions,\n  SetCurrentScreenOptions,\n  SetEnabledOptions,\n  SetSessionTimeoutDurationOptions,\n  SetUserIdOptions,\n  SetUserPropertyOptions,\n} from './definitions';\n\nexport class FirebaseAnalyticsWeb\n  extends WebPlugin\n  implements FirebaseAnalyticsPlugin {\n\n  public async getAppSessionId(): Promise<GetSessionIdResult> {\n    return {};\n  }\n\n  public async getAppInstanceId(): Promise<GetAppInstanceIdResult> {\n    // throw this.unimplemented('Not implemented on web.');\n    return {}\n  }\n\n  public async setConsent(_options: SetConsentOptions): Promise<void> {\n    return;\n    // const status: ConsentStatusString =\n    //   options.status === ConsentStatus.Granted ? 'granted' : 'denied';\n    // const consentSettings: ConsentSettings = {};\n    // switch (options.type) {\n    //   case ConsentType.AdPersonalization:\n    //     consentSettings.ad_personalization = status;\n    //     break;\n    //   case ConsentType.AdStorage:\n    //     consentSettings.ad_storage = status;\n    //     break;\n    //   case ConsentType.AdUserData:\n    //     consentSettings.ad_user_data = status;\n    //     break;\n    //   case ConsentType.AnalyticsStorage:\n    //     consentSettings.analytics_storage = status;\n    //     break;\n    //   case ConsentType.FunctionalityStorage:\n    //     consentSettings.functionality_storage = status;\n    //     break;\n    //   case ConsentType.PersonalizationStorage:\n    //     consentSettings.personalization_storage = status;\n    //     break;\n    // }\n    // setConsent(consentSettings);\n  }\n\n  public async setUserId(_options: SetUserIdOptions): Promise<void> {\n    // const analytics = getAnalytics();\n    // setUserId(analytics, options.userId);\n    return;\n  }\n\n  public async setUserProperty(_options: SetUserPropertyOptions): Promise<void> {\n    // const analytics = getAnalytics();\n    // setUserProperties(analytics, {\n    //   [options.key]: options.value,\n    // });\n    return;\n  }\n\n  public async setCurrentScreen(\n    _options: SetCurrentScreenOptions,\n  ): Promise<void> {\n    // const analytics = getAnalytics();\n    // logEvent(analytics, 'screen_view', {\n    //   firebase_screen: options.screenName || undefined,\n    //   firebase_screen_class: options.screenClassOverride || undefined,\n    // });\n    return;\n  }\n\n  public async logEvent(_options: LogEventOptions): Promise<void> {\n    // const analytics = getAnalytics();\n    // logEvent(analytics, options.name, options.params);\n    return;\n  }\n\n  public async setSessionTimeoutDuration(\n    _options: SetSessionTimeoutDurationOptions,\n  ): Promise<void> {\n    // throw this.unimplemented('Not implemented on web.');\n    return;\n  }\n\n  public async setEnabled(_options: SetEnabledOptions): Promise<void> {\n    // const analytics = getAnalytics();\n    // setAnalyticsCollectionEnabled(analytics, _options.enabled);\n    return;\n  }\n\n  public async isEnabled(): Promise<IsEnabledResult> {\n    // const enabled = (window as any)['ga-disable-analyticsId'] === true;\n    // return {\n    //   enabled,\n    // };\n    return { enabled: true };\n  }\n\n  public async resetAnalyticsData(): Promise<void> {\n    // throw this.unimplemented('Not implemented on web.');\n    return;\n  }\n}\n"]}
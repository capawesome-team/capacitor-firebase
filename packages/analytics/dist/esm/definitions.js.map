{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AA8NA;;GAEG;AACH,MAAM,CAAN,IAAY,WAyBX;AAzBD,WAAY,WAAW;IACrB;;OAEG;IACH,uDAAwC,CAAA;IACxC;;OAEG;IACH,uCAAwB,CAAA;IACxB;;OAEG;IACH,0CAA2B,CAAA;IAC3B;;OAEG;IACH,qDAAsC,CAAA;IACtC;;OAEG;IACH,6DAA8C,CAAA;IAC9C;;OAEG;IACH,iEAAkD,CAAA;AACpD,CAAC,EAzBW,WAAW,KAAX,WAAW,QAyBtB;AAED;;GAEG;AACH,MAAM,CAAN,IAAY,aASX;AATD,WAAY,aAAa;IACvB;;OAEG;IACH,oCAAmB,CAAA;IACnB;;OAEG;IACH,kCAAiB,CAAA;AACnB,CAAC,EATW,aAAa,KAAb,aAAa,QASxB","sourcesContent":["export interface FirebaseAnalyticsPlugin {\n  /**\n   * Retrieves the app instance id.\n   *\n   * Only available for Android and iOS.\n   *\n   * @since 1.4.0\n   */\n  getAppInstanceId(): Promise<GetAppInstanceIdResult>;\n  /**\n     * Retrieves the session id.\n     *\n     * Only available for Android and iOS.\n     *\n     * @since 1.4.0\n     */\n  getAppSessionId(): Promise<GetSessionIdResult>;\n  /**\n   * Sets the user's consent mode.\n   *\n   * @since 6.0.0\n   */\n  setConsent(options: SetConsentOptions): Promise<void>;\n  /**\n   * Sets the user ID property.\n   *\n   * @since 0.1.0\n   */\n  setUserId(options: SetUserIdOptions): Promise<void>;\n  /**\n   * Sets a custom user property to a given value.\n   *\n   * @since 0.1.0\n   */\n  setUserProperty(options: SetUserPropertyOptions): Promise<void>;\n  /**\n   * Sets the current screen name.\n   *\n   * @since 0.1.0\n   */\n  setCurrentScreen(options: SetCurrentScreenOptions): Promise<void>;\n  /**\n   * Logs an app event.\n   *\n   * @since 0.1.0\n   */\n  logEvent(options: LogEventOptions): Promise<void>;\n  /**\n   * Sets the duration of inactivity that terminates the current session.\n   *\n   * Only available for Android and iOS.\n   *\n   * @since 0.1.0\n   */\n  setSessionTimeoutDuration(\n    options: SetSessionTimeoutDurationOptions,\n  ): Promise<void>;\n  /**\n   * Enables/disables automatic data collection.\n   * The value does not apply until the next run of the app.\n   *\n   * @since 0.1.0\n   */\n  setEnabled(options: SetEnabledOptions): Promise<void>;\n  /**\n   * Returns whether or not automatic data collection is enabled.\n   *\n   * Only available for Web.\n   *\n   * @since 0.1.0\n   */\n  isEnabled(): Promise<IsEnabledResult>;\n  /**\n   * Clears all analytics data for this app from the device.\n   * Resets the app instance id.\n   *\n   * Only available for Android and iOS.\n   *\n   * @since 0.1.0\n   */\n  resetAnalyticsData(): Promise<void>;\n}\n\n/**\n * @since 1.4.0\n */\nexport interface GetAppInstanceIdResult {\n  /**\n   * The app instance id.\n   *\n   * Not defined if `FirebaseAnalytics.ConsentType.ANALYTICS_STORAGE` has been set to `FirebaseAnalytics.ConsentStatus.DENIED`.\n   *\n   * @since 1.4.0\n   */\n  appInstanceId?: string;\n}\n\n\n/**\n * @since 1.4.0\n */\nexport interface GetSessionIdResult {\n  /**\n   * The app session id.\n   *\n   * Not defined if `FirebaseAnalytics.ConsentType.ANALYTICS_STORAGE` has been set to `FirebaseAnalytics.ConsentStatus.DENIED`.\n   *\n   * @since 1.4.0\n   */\n  appSessionId?: number;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface SetConsentOptions {\n  /**\n   * The consent type.\n   *\n   * @since 6.0.0\n   */\n  type: ConsentType;\n  /**\n   * The consent status.\n   *\n   * @since 6.0.0\n   */\n  status: ConsentStatus;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface SetUserIdOptions {\n  /**\n   * @since 0.1.0\n   */\n  userId: string | null;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface SetUserPropertyOptions {\n  /**\n   * @since 0.1.0\n   */\n  key: string;\n  /**\n   * @since 0.1.0\n   */\n  value: string | null;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface SetCurrentScreenOptions {\n  /**\n   * @since 0.1.0\n   */\n  screenName: string | null;\n  /**\n   * Only available for Android and iOS.\n   *\n   * @default null\n   * @since 0.1.0\n   */\n  screenClassOverride?: string | null;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface LogEventOptions {\n  /**\n   * The event name.\n   *\n   * @since 0.1.0\n   */\n  name: string;\n  /**\n   * The optional event params.\n   *\n   * @since 0.1.0\n   */\n  params?: { [key: string]: any };\n}\n\n/**\n * @since 0.1.0\n */\nexport interface SetSessionTimeoutDurationOptions {\n  /**\n   * Duration in seconds.\n   *\n   * @default 1800\n   * @since 0.1.0\n   */\n  duration: number;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface SetEnabledOptions {\n  /**\n   * @since 0.1.0\n   */\n  enabled: boolean;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface IsEnabledResult {\n  /**\n   * @since 0.1.0\n   */\n  enabled: boolean;\n}\n\n/**\n * @since 6.0.0\n */\nexport enum ConsentType {\n  /**\n   * @since 6.0.0\n   */\n  AdPersonalization = 'AD_PERSONALIZATION',\n  /**\n   * @since 6.0.0\n   */\n  AdStorage = 'AD_STORAGE',\n  /**\n   * @since 6.0.0\n   */\n  AdUserData = 'AD_USER_DATA',\n  /**\n   * @since 6.0.0\n   */\n  AnalyticsStorage = 'ANALYTICS_STORAGE',\n  /**\n   * @since 6.0.0\n   */\n  FunctionalityStorage = 'FUNCTIONALITY_STORAGE',\n  /**\n   * @since 6.0.0\n   */\n  PersonalizationStorage = 'PERSONALIZATION_STORAGE',\n}\n\n/**\n * @since 6.0.0\n */\nexport enum ConsentStatus {\n  /**\n   * @since 6.0.0\n   */\n  Granted = 'GRANTED',\n  /**\n   * @since 6.0.0\n   */\n  Denied = 'DENIED',\n}\n"]}
{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["export interface FirebaseFirestorePlugin {\n  /**\n   * Adds a new document to a collection with the given data.\n   *\n   * @since 5.2.0\n   */\n  addDocument(options: AddDocumentOptions): Promise<AddDocumentResult>;\n  /**\n   * Writes to the document referred to by the specified reference.\n   * If the document does not yet exist, it will be created.\n   *\n   * @since 5.2.0\n   */\n  setDocument(options: SetDocumentOptions): Promise<void>;\n  /**\n   * Reads the document referred to by the specified reference.\n   *\n   * @since 5.2.0\n   */\n  getDocument<T extends DocumentData = DocumentData>(\n    options: GetDocumentOptions,\n  ): Promise<GetDocumentResult<T>>;\n  /**\n   * Updates fields in the document referred to by the specified reference.\n   *\n   * @since 5.2.0\n   */\n  updateDocument(options: UpdateDocumentOptions): Promise<void>;\n  /**\n   * Deletes the document referred to by the specified reference.\n   *\n   * @since 5.2.0\n   */\n  deleteDocument(options: DeleteDocumentOptions): Promise<void>;\n  /**\n   * Execute multiple write operations as a single batch.\n   *\n   * @since 6.1.0\n   */\n  writeBatch(options: WriteBatchOptions): Promise<void>;\n  /**\n   * Reads the collection referenced by the specified reference.\n   *\n   * @since 5.2.0\n   */\n  getCollection<T extends DocumentData = DocumentData>(\n    options: GetCollectionOptions,\n  ): Promise<GetCollectionResult<T>>;\n  /**\n   * Reads the collection group referenced by the specified reference.\n   */\n  getCollectionGroup<T extends DocumentData = DocumentData>(\n    options: GetCollectionGroupOptions,\n  ): Promise<GetCollectionGroupResult<T>>;\n  /**\n   * Fetches the number of documents in a collection.\n   *\n   * @since 6.4.0\n   */\n  getCountFromServer(\n    options: GetCountFromServerOptions,\n  ): Promise<GetCountFromServerResult>;\n  /**\n   * Clears the persistent storage. This includes pending writes and cached documents.\n   *\n   * Must be called after the app is shutdown or when the app is first initialized.\n   *\n   * @since 5.2.0\n   */\n  clearPersistence(): Promise<void>;\n  /**\n   * Re-enables use of the network.\n   *\n   * @since 5.2.0\n   */\n  enableNetwork(): Promise<void>;\n  /**\n   * Disables use of the network.\n   *\n   * @since 5.2.0\n   */\n  disableNetwork(): Promise<void>;\n  /**\n   * Instrument your app to talk to the Firestore emulator.\n   *\n   * @since 6.1.0\n   */\n  useEmulator(options: UseEmulatorOptions): Promise<void>;\n  /**\n   * Adds a listener for document snapshot events.\n   *\n   * @since 5.2.0\n   */\n  addDocumentSnapshotListener<T extends DocumentData = DocumentData>(\n    options: AddDocumentSnapshotListenerOptions,\n    callback: AddDocumentSnapshotListenerCallback<T>,\n  ): Promise<CallbackId>;\n  /**\n   * Adds a listener for collection snapshot events.\n   *\n   * @since 5.2.0\n   */\n  addCollectionSnapshotListener<T extends DocumentData = DocumentData>(\n    options: AddCollectionSnapshotListenerOptions,\n    callback: AddCollectionSnapshotListenerCallback<T>,\n  ): Promise<CallbackId>;\n  /**\n   * Adds a listener for collection group snapshot events.\n   *\n   * @since 6.1.0\n   */\n  addCollectionGroupSnapshotListener<T extends DocumentData = DocumentData>(\n    options: AddCollectionGroupSnapshotListenerOptions,\n    callback: AddCollectionGroupSnapshotListenerCallback<T>,\n  ): Promise<CallbackId>;\n  /**\n   * Remove a listener for document or collection snapshot events.\n   *\n   * @since 5.2.0\n   */\n  removeSnapshotListener(options: RemoveSnapshotListenerOptions): Promise<void>;\n  /**\n   * Remove all listeners for this plugin.\n   *\n   * @since 5.2.0\n   */\n  removeAllListeners(): Promise<void>;\n}\n\n/**\n * @since 5.2.0\n */\nexport interface SetDocumentOptions {\n  /**\n   * The reference as a string, with path components separated by a forward slash (`/`).\n   *\n   * @since 5.2.0\n   * @example 'users/Aorq09lkt1ynbR7xhTUx'\n   */\n  reference: string;\n  /**\n   * An object containing the data for the new document.\n   *\n   * @since 5.2.0\n   * @example { first: 'Alan', last: 'Turing', born: 1912 }\n   */\n  data: DocumentData;\n  /**\n   * Whether to merge the provided data with an existing document.\n   *\n   * @since 5.2.0\n   * @example true\n   * @default false\n   */\n  merge?: boolean;\n}\n\n/**\n * @since 5.2.0\n */\nexport interface AddDocumentOptions {\n  /**\n   * The reference as a string, with path components separated by a forward slash (`/`).\n   *\n   * @since 5.2.0\n   * @example 'users'\n   */\n  reference: string;\n  /**\n   * An object containing the data for the new document.\n   *\n   * @since 5.2.0\n   * @example { first: 'Alan', last: 'Turing', born: 1912 }\n   */\n  data: DocumentData;\n}\n\n/**\n * @since 5.2.0\n */\nexport interface AddDocumentResult {\n  /**\n   * The reference of the newly added document.\n   *\n   * @since 5.2.0\n   */\n  reference: DocumentReference;\n}\n\n/**\n * @since 5.2.0\n */\nexport interface GetDocumentOptions {\n  /**\n   * The reference as a string, with path components separated by a forward slash (`/`).\n   *\n   * @since 5.2.0\n   */\n  reference: string;\n}\n\n/**\n * @since 5.2.0\n */\nexport interface GetDocumentResult<T> {\n  /**\n   * The current document contents.\n   *\n   * @since 5.2.0\n   */\n  snapshot: DocumentSnapshot<T>;\n}\n\n/**\n * @since 5.2.0\n */\nexport interface UpdateDocumentOptions {\n  /**\n   * The reference as a string, with path components separated by a forward slash (`/`).\n   *\n   * @since 5.2.0\n   */\n  reference: string;\n  /**\n   * An object containing the data for the new document.\n   *\n   * @since 5.2.0\n   * @example { first: 'Alan', last: 'Turing', born: 1912 }\n   */\n  data: DocumentData;\n}\n\n/**\n * @since 5.2.0\n */\nexport interface DeleteDocumentOptions {\n  /**\n   * The reference as a string, with path components separated by a forward slash (`/`).\n   *\n   * @since 5.2.0\n   */\n  reference: string;\n}\n\n/**\n * @since 6.1.0\n */\nexport interface WriteBatchOptions {\n  /**\n   * The operations to execute in the batch.\n   *\n   * @since 6.1.0\n   */\n  operations: WriteBatchOperation[];\n}\n\n/**\n * @since 6.1.0\n */\nexport interface WriteBatchOperation {\n  /**\n   * The type of operation.\n   *\n   * @since 6.1.0\n   */\n  type: 'set' | 'update' | 'delete';\n  /**\n   * The reference as a string, with path components separated by a forward slash (`/`).\n   *\n   * @since 6.1.0\n   */\n  reference: string;\n  /**\n   * An object containing the data for the new document.\n   *\n   * @since 6.1.0\n   */\n  data?: DocumentData;\n}\n\n/**\n * @since 5.2.0\n */\nexport interface GetCollectionOptions {\n  /**\n   * The reference as a string, with path components separated by a forward slash (`/`).\n   *\n   * @since 5.2.0\n   */\n  reference: string;\n  /**\n   * The filter to apply.\n   *\n   * @since 5.2.0\n   */\n  compositeFilter?: QueryCompositeFilterConstraint;\n  /**\n   * Narrow or order the set of documents to retrieve, but do not explicitly filter for document fields.\n   *\n   * @since 5.2.0\n   */\n  queryConstraints?: QueryNonFilterConstraint[];\n}\n\n/**\n * @since 5.2.0\n */\nexport interface GetCollectionResult<T> {\n  /**\n   * The documents in the collection.\n   *\n   * @since 5.2.0\n   */\n  snapshots: DocumentSnapshot<T>[];\n}\n\n/**\n * @since 5.2.0\n */\nexport interface GetCollectionGroupOptions {\n  /**\n   * The reference as a string, with path components separated by a forward slash (`/`).\n   *\n   * @since 5.2.0\n   */\n  reference: string;\n  /**\n   * The filter to apply.\n   *\n   * @since 5.2.0\n   */\n  compositeFilter?: QueryCompositeFilterConstraint;\n  /**\n   * Narrow or order the set of documents to retrieve, but do not explicitly filter for document fields.\n   *\n   * @since 5.2.0\n   */\n  queryConstraints?: QueryNonFilterConstraint[];\n}\n\n/**\n * @since 5.2.0\n */\nexport interface GetCollectionGroupResult<T> {\n  /**\n   * The documents in the collection.\n   *\n   * @since 5.2.0\n   */\n  snapshots: DocumentSnapshot<T>[];\n}\n\n/**\n * @since 6.1.0\n */\nexport interface UseEmulatorOptions {\n  /**\n   * The emulator host without any port or scheme.\n   *\n   * Note when using a Android Emulator device: 10.0.2.2 is the special IP address to connect to the 'localhost' of the host computer.\n   *\n   * @since 6.1.0\n   * @example \"127.0.0.1\"\n   */\n  host: string;\n  /**\n   * The emulator port.\n   *\n   * @since 6.1.0\n   * @default 8080\n   * @example 8080\n   */\n  port?: number;\n}\n\n/**\n * @since 6.2.0\n */\nexport interface SnapshotListenerOptions {\n  /**\n   * Include a change even if only the metadata of the query or of a document\n   * changed.\n   *\n   * @since 6.2.0\n   * @default false\n   */\n  readonly includeMetadataChanges?: boolean;\n  /**\n   * Set the source the query listens to.\n   * The source `default` listens to both cache and server.\n   *\n   * Only available for Web.\n   *\n   * @since 6.2.0\n   * @default \"default\"\n   */\n  readonly source?: 'default' | 'cache';\n}\n\n/**\n * @since 5.2.0\n */\nexport interface AddDocumentSnapshotListenerOptions\n  extends SnapshotListenerOptions {\n  /**\n   * The reference as a string, with path components separated by a forward slash (`/`).\n   *\n   * @since 5.2.0\n   */\n  reference: string;\n}\n\n/**\n * @since 5.2.0\n */\nexport type AddDocumentSnapshotListenerCallback<T> = (\n  event: AddDocumentSnapshotListenerCallbackEvent<T> | null,\n  error: any,\n) => void;\n\n/**\n * @since 5.2.0\n */\nexport type AddDocumentSnapshotListenerCallbackEvent<T> = GetDocumentResult<T>;\n\n/**\n * @since 5.2.0\n */\nexport interface AddCollectionSnapshotListenerOptions\n  extends SnapshotListenerOptions {\n  /**\n   * The reference as a string, with path components separated by a forward slash (`/`).\n   *\n   * @since 5.2.0\n   */\n  reference: string;\n  /**\n   * The filter to apply.\n   *\n   * @since 5.2.0\n   */\n  compositeFilter?: QueryCompositeFilterConstraint;\n  /**\n   * Narrow or order the set of documents to retrieve, but do not explicitly filter for document fields.\n   *\n   * @since 5.2.0\n   */\n  queryConstraints?: QueryNonFilterConstraint[];\n}\n\n/**\n * @since 5.2.0\n */\nexport type AddCollectionSnapshotListenerCallback<T> = (\n  event: AddCollectionSnapshotListenerCallbackEvent<T> | null,\n  error: any,\n) => void;\n\n/**\n * @since 5.2.0\n */\nexport type AddCollectionSnapshotListenerCallbackEvent<T> =\n  GetCollectionResult<T>;\n\n/**\n * @since 6.1.0\n */\nexport interface AddCollectionGroupSnapshotListenerOptions\n  extends SnapshotListenerOptions {\n  /**\n   * The reference as a string, with path components separated by a forward slash (`/`).\n   *\n   * @since 6.1.0\n   */\n  reference: string;\n  /**\n   * The filter to apply.\n   *\n   * @since 6.1.0\n   */\n  compositeFilter?: QueryCompositeFilterConstraint;\n  /**\n   * Narrow or order the set of documents to retrieve, but do not explicitly filter for document fields.\n   *\n   * @since 6.1.0\n   */\n  queryConstraints?: QueryNonFilterConstraint[];\n}\n\n/**\n * @since 6.1.0\n */\nexport type AddCollectionGroupSnapshotListenerCallback<T> = (\n  event: AddCollectionGroupSnapshotListenerCallbackEvent<T> | null,\n  error: any,\n) => void;\n\n/**\n * @since 6.1.0\n */\nexport type AddCollectionGroupSnapshotListenerCallbackEvent<T> =\n  GetCollectionGroupResult<T>;\n\n/**\n * @since 5.2.0\n */\nexport type CallbackId = string;\n\n/**\n * @since 5.2.0\n */\nexport interface RemoveSnapshotListenerOptions {\n  /**\n   * @since 5.2.0\n   */\n  callbackId: CallbackId;\n}\n\n/**\n * @since 6.4.0\n */\nexport interface GetCountFromServerOptions {\n  /**\n   * The reference as a string, with path components separated by a forward slash (`/`).\n   *\n   * @since 6.4.0\n   */\n  reference: string;\n}\n\n/**\n * @since 6.4.0\n */\nexport interface GetCountFromServerResult {\n  /**\n   * The number of documents in the collection.\n   *\n   * @since 6.4.0\n   */\n  count: number;\n}\n\n/**\n * @since 5.2.0\n */\nexport interface DocumentReference {\n  /**\n   * The document's identifier within its collection.\n   *\n   * @since 5.2.0\n   * @example 'Aorq09lkt1ynbR7xhTUx'\n   */\n  id: string;\n  /**\n   * The path of the document.\n   *\n   * @since 5.2.0\n   * @example 'users/Aorq09lkt1ynbR7xhTUx'\n   */\n  path: string;\n}\n\n/**\n * @since 5.2.0\n */\nexport interface DocumentSnapshot<T> {\n  /**\n   * The document's identifier within its collection.\n   *\n   * @since 5.2.0\n   */\n  id: string;\n  /**\n   * The path of the document.\n   *\n   * @since 5.2.0\n   */\n  path: string;\n  /**\n   * An object containing the data for the document.\n   *\n   * Returns `null` if the document doesn't exist.\n   *\n   * @since 5.2.0\n   */\n  data: T | null;\n  /**\n   * Metadata about the snapshot, concerning its source and if it has local modifications.\n   *\n   * @since 6.2.0\n   */\n  metadata: SnapshotMetadata;\n}\n\n/**\n * @since 6.2.0\n */\nexport interface SnapshotMetadata {\n  /**\n   * True if the snapshot was created from cached data.\n   *\n   * @since 6.2.0\n   */\n  fromCache: boolean;\n  /**\n   * True if the snapshot was created from pending write data.\n   *\n   * @since 6.2.0\n   */\n  hasPendingWrites: boolean;\n}\n\n/**\n * @since 5.2.0\n */\nexport type QueryFilterConstraint =\n  | QueryFieldFilterConstraint\n  | QueryCompositeFilterConstraint;\n\n/**\n * @since 5.2.0\n */\nexport type QueryNonFilterConstraint =\n  | QueryOrderByConstraint\n  | QueryLimitConstraint\n  | QueryStartAtConstraint\n  | QueryEndAtConstraint;\n\n/**\n * @since 5.2.0\n */\nexport interface QueryCompositeFilterConstraint {\n  /**\n   * The type of the constraint.\n   *\n   * @since 5.2.0\n   */\n  type: 'and' | 'or';\n  /**\n   * The filters to apply.\n   *\n   * @since 5.2.0\n   */\n  queryConstraints: QueryFilterConstraint[];\n}\n\n/**\n * @since 5.2.0\n */\nexport type QueryConstraint =\n  | QueryFieldFilterConstraint\n  | QueryNonFilterConstraint;\n\n/**\n * @since 5.2.0\n */\nexport interface QueryFieldFilterConstraint {\n  /**\n   * The type of the constraint.\n   *\n   * @since 5.2.0\n   */\n  type: 'where';\n  /**\n   * The path to compare.\n   *\n   * @since 5.2.0\n   */\n  fieldPath: string;\n  /**\n   * The operation string to apply.\n   *\n   * @since 5.2.0\n   */\n  opStr: QueryOperator;\n  /**\n   * The value for comparison.\n   *\n   * @since 5.2.0\n   */\n  value: any;\n}\n\n/**\n * @since 5.2.0\n */\nexport interface QueryOrderByConstraint {\n  /**\n   * The type of the constraint.\n   *\n   * @since 5.2.0\n   */\n  type: 'orderBy';\n  /**\n   * The path to compare.\n   *\n   * @since 5.2.0\n   */\n  fieldPath: string;\n  /**\n   * The direction to sort by.\n   *\n   * @since 5.2.0\n   */\n  directionStr: OrderByDirection;\n}\n\n/**\n * @since 5.2.0\n */\nexport interface QueryLimitConstraint {\n  /**\n   * The type of the constraint.\n   *\n   * @since 5.2.0\n   */\n  type: 'limit' | 'limitToLast';\n  /**\n   * The maximum number of items to return.\n   *\n   * @since 5.2.0\n   */\n  limit: number;\n}\n\n/**\n * @since 5.2.0\n */\nexport interface QueryStartAtConstraint {\n  /**\n   * The type of the constraint.\n   *\n   * @since 5.2.0\n   */\n  type: 'startAt' | 'startAfter';\n  /**\n   * The reference to start at or after as a string, with path components separated by a forward slash (`/`).\n   *\n   * **Attention**: This requires an additional document read.\n   *\n   * @since 5.2.0\n   * @example 'users/Aorq09lkt1ynbR7xhTUx'\n   */\n  reference: string;\n}\n\n/**\n * @since 5.2.0\n */\nexport interface QueryEndAtConstraint {\n  /**\n   * The type of the constraint.\n   *\n   * @since 5.2.0\n   */\n  type: 'endAt' | 'endBefore';\n  /**\n   * The reference as to end at or before as a string, with path components separated by a forward slash (`/`).\n   *\n   * **Attention**: This requires an additional document read.\n   *\n   * @since 5.2.0\n   * @example 'users/Aorq09lkt1ynbR7xhTUx'\n   */\n  reference: string;\n}\n\n/**\n * @since 5.2.0\n */\nexport interface DocumentData {\n  /**\n   * A mapping between a field and its value.\n   *\n   * @since 5.2.0\n   */\n  [field: string]: any;\n}\n\n/**\n * @since 5.2.0\n */\nexport type QueryOperator =\n  | '<'\n  | '<='\n  | '=='\n  | '>='\n  | '>'\n  | '!='\n  | 'array-contains'\n  | 'array-contains-any'\n  | 'in'\n  | 'not-in';\n\n/**\n * @since 5.2.0\n */\nexport type QueryConstraintType =\n  | 'where'\n  | 'orderBy'\n  | 'limit'\n  | 'limitToLast'\n  | 'startAt'\n  | 'startAfter'\n  | 'endAt'\n  | 'endBefore';\n\n/**\n * @since 5.2.0\n */\nexport type OrderByDirection = 'desc' | 'asc';\n"]}
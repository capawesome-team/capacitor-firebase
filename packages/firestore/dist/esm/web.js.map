{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport type {\n  QueryCompositeFilterConstraint as FirebaseQueryCompositeFilterConstraint,\n  QueryConstraint as FirebaseQueryConstraint,\n  QueryFieldFilterConstraint as FirebaseQueryFieldFilterConstraint,\n  QueryFilterConstraint as FirebaseQueryFilterConstraint,\n  QueryNonFilterConstraint as FirebaseQueryNonFilterConstraint,\n  Query,\n  Unsubscribe,\n} from 'firebase/firestore';\nimport {\n  addDoc,\n  and,\n  clearIndexedDbPersistence,\n  collection,\n  collectionGroup,\n  connectFirestoreEmulator,\n  deleteDoc,\n  disableNetwork,\n  doc,\n  enableNetwork,\n  endAt,\n  endBefore,\n  getCountFromServer,\n  getDoc,\n  getDocs,\n  getFirestore,\n  limit,\n  limitToLast,\n  onSnapshot,\n  or,\n  orderBy,\n  query,\n  setDoc,\n  startAfter,\n  startAt,\n  updateDoc,\n  where,\n  writeBatch,\n} from 'firebase/firestore';\n\nimport type {\n  AddCollectionGroupSnapshotListenerCallback,\n  AddCollectionGroupSnapshotListenerOptions,\n  AddCollectionSnapshotListenerCallback,\n  AddCollectionSnapshotListenerCallbackEvent,\n  AddCollectionSnapshotListenerOptions,\n  AddDocumentOptions,\n  AddDocumentResult,\n  AddDocumentSnapshotListenerCallback,\n  AddDocumentSnapshotListenerCallbackEvent,\n  AddDocumentSnapshotListenerOptions,\n  DocumentData,\n  FirebaseFirestorePlugin,\n  GetCollectionGroupOptions,\n  GetCollectionGroupResult,\n  GetCollectionOptions,\n  GetCollectionResult,\n  GetCountFromServerOptions,\n  GetCountFromServerResult,\n  GetDocumentOptions,\n  GetDocumentResult,\n  QueryCompositeFilterConstraint,\n  QueryConstraint,\n  QueryFieldFilterConstraint,\n  QueryFilterConstraint,\n  QueryNonFilterConstraint,\n  RemoveSnapshotListenerOptions,\n  SetDocumentOptions,\n  UseEmulatorOptions,\n  WriteBatchOptions,\n} from './definitions';\n\nexport class FirebaseFirestoreWeb\n  extends WebPlugin\n  implements FirebaseFirestorePlugin\n{\n  private readonly unsubscribesMap: Map<string, Unsubscribe> = new Map();\n\n  public async addDocument(\n    options: AddDocumentOptions,\n  ): Promise<AddDocumentResult> {\n    const firestore = getFirestore();\n    const { reference, data } = options;\n    const documentReference = await addDoc<DocumentData, DocumentData>(\n      collection(firestore, reference),\n      data,\n    );\n    return {\n      reference: {\n        id: documentReference.id,\n        path: documentReference.path,\n      },\n    };\n  }\n\n  public async setDocument(options: SetDocumentOptions): Promise<void> {\n    const firestore = getFirestore();\n    const { reference, data, merge } = options;\n    await setDoc<DocumentData, DocumentData>(doc(firestore, reference), data, {\n      merge,\n    });\n  }\n\n  public async getDocument<T extends DocumentData>(\n    options: GetDocumentOptions,\n  ): Promise<GetDocumentResult<T>> {\n    const firestore = getFirestore();\n    const { reference } = options;\n    const documentSnapshot = await getDoc(doc(firestore, reference));\n    const documentSnapshotData = documentSnapshot.data();\n    return {\n      snapshot: {\n        id: documentSnapshot.id,\n        path: documentSnapshot.ref.path,\n        data: (documentSnapshotData === undefined\n          ? null\n          : documentSnapshotData) as T | null,\n        metadata: {\n          hasPendingWrites: documentSnapshot.metadata.hasPendingWrites,\n          fromCache: documentSnapshot.metadata.fromCache,\n        },\n      },\n    };\n  }\n\n  public async updateDocument(options: SetDocumentOptions): Promise<void> {\n    const firestore = getFirestore();\n    const { reference, data } = options;\n    await updateDoc<DocumentData, DocumentData>(\n      doc(firestore, reference),\n      data,\n    );\n  }\n\n  public async deleteDocument(options: SetDocumentOptions): Promise<void> {\n    const firestore = getFirestore();\n    const { reference } = options;\n    await deleteDoc(doc(firestore, reference));\n  }\n\n  public async writeBatch(options: WriteBatchOptions): Promise<void> {\n    const firestore = getFirestore();\n    const { operations } = options;\n    const batch = writeBatch(firestore);\n    for (const operation of operations) {\n      const { type, reference, data } = operation;\n      const documentReference = doc(firestore, reference);\n      switch (type) {\n        case 'set':\n          batch.set(documentReference, data);\n          break;\n        case 'update':\n          batch.update(documentReference, data ?? {});\n          break;\n        case 'delete':\n          batch.delete(documentReference);\n          break;\n      }\n    }\n    await batch.commit();\n  }\n\n  public async getCollection<T extends DocumentData>(\n    options: GetCollectionOptions,\n  ): Promise<GetCollectionResult<T>> {\n    const collectionQuery = await this.buildCollectionQuery(\n      options,\n      'collection',\n    );\n    const collectionSnapshot = await getDocs(collectionQuery);\n    return {\n      snapshots: collectionSnapshot.docs.map(documentSnapshot => ({\n        id: documentSnapshot.id,\n        path: documentSnapshot.ref.path,\n        data: documentSnapshot.data() as T,\n        metadata: {\n          hasPendingWrites: documentSnapshot.metadata.hasPendingWrites,\n          fromCache: documentSnapshot.metadata.fromCache,\n        },\n      })),\n    };\n  }\n\n  public async getCollectionGroup<T extends DocumentData>(\n    options: GetCollectionGroupOptions,\n  ): Promise<GetCollectionGroupResult<T>> {\n    const collectionQuery = await this.buildCollectionQuery(\n      options,\n      'collectionGroup',\n    );\n    const collectionSnapshot = await getDocs(collectionQuery);\n    return {\n      snapshots: collectionSnapshot.docs.map(documentSnapshot => ({\n        id: documentSnapshot.id,\n        path: documentSnapshot.ref.path,\n        data: documentSnapshot.data() as T,\n        metadata: {\n          hasPendingWrites: documentSnapshot.metadata.hasPendingWrites,\n          fromCache: documentSnapshot.metadata.fromCache,\n        },\n      })),\n    };\n  }\n\n  public async getCountFromServer(\n    options: GetCountFromServerOptions,\n  ): Promise<GetCountFromServerResult> {\n    const firestore = getFirestore();\n    const { reference } = options;\n    const coll = collection(firestore, reference);\n    const snapshot = await getCountFromServer(coll);\n    return { count: snapshot.data().count };\n  }\n\n  public async clearPersistence(): Promise<void> {\n    const firestore = getFirestore();\n    await clearIndexedDbPersistence(firestore);\n  }\n\n  public async enableNetwork(): Promise<void> {\n    const firestore = getFirestore();\n    await enableNetwork(firestore);\n  }\n\n  public async disableNetwork(): Promise<void> {\n    const firestore = getFirestore();\n    await disableNetwork(firestore);\n  }\n\n  public async useEmulator(options: UseEmulatorOptions): Promise<void> {\n    const firestore = getFirestore();\n    const port = options.port || 8080;\n    connectFirestoreEmulator(firestore, options.host, port);\n  }\n\n  public async addDocumentSnapshotListener<\n    T extends DocumentData = DocumentData,\n  >(\n    options: AddDocumentSnapshotListenerOptions,\n    callback: AddDocumentSnapshotListenerCallback<T>,\n  ): Promise<string> {\n    const firestore = getFirestore();\n    const unsubscribe = onSnapshot(\n      doc(firestore, options.reference),\n      {\n        includeMetadataChanges: options.includeMetadataChanges,\n        source: options.source,\n      },\n      snapshot => {\n        const data = snapshot.data();\n        const event: AddDocumentSnapshotListenerCallbackEvent<T> = {\n          snapshot: {\n            id: snapshot.id,\n            path: snapshot.ref.path,\n            data: (data === undefined ? null : data) as T | null,\n            metadata: {\n              hasPendingWrites: snapshot.metadata.hasPendingWrites,\n              fromCache: snapshot.metadata.fromCache,\n            },\n          },\n        };\n        callback(event, undefined);\n      },\n      error => callback(null, error),\n    );\n    const id = Date.now().toString();\n    this.unsubscribesMap.set(id, unsubscribe);\n    return id;\n  }\n\n  public async addCollectionSnapshotListener<\n    T extends DocumentData = DocumentData,\n  >(\n    options: AddCollectionSnapshotListenerOptions,\n    callback: AddCollectionSnapshotListenerCallback<T>,\n  ): Promise<string> {\n    const collectionQuery = await this.buildCollectionQuery(\n      options,\n      'collection',\n    );\n    const unsubscribe = onSnapshot(\n      collectionQuery,\n      {\n        includeMetadataChanges: options.includeMetadataChanges,\n        source: options.source,\n      },\n      snapshot => {\n        const event: AddCollectionSnapshotListenerCallbackEvent<T> = {\n          snapshots: snapshot.docs.map(documentSnapshot => ({\n            id: documentSnapshot.id,\n            path: documentSnapshot.ref.path,\n            data: documentSnapshot.data() as T,\n            metadata: {\n              hasPendingWrites: documentSnapshot.metadata.hasPendingWrites,\n              fromCache: documentSnapshot.metadata.fromCache,\n            },\n          })),\n        };\n        callback(event, undefined);\n      },\n      error => callback(null, error),\n    );\n    const id = Date.now().toString();\n    this.unsubscribesMap.set(id, unsubscribe);\n    return id;\n  }\n\n  public async addCollectionGroupSnapshotListener<\n    T extends DocumentData = DocumentData,\n  >(\n    options: AddCollectionGroupSnapshotListenerOptions,\n    callback: AddCollectionGroupSnapshotListenerCallback<T>,\n  ): Promise<string> {\n    const collectionQuery = await this.buildCollectionQuery(\n      options,\n      'collectionGroup',\n    );\n    const unsubscribe = onSnapshot(\n      collectionQuery,\n      {\n        includeMetadataChanges: options.includeMetadataChanges,\n        source: options.source,\n      },\n      snapshot => {\n        const event: AddCollectionSnapshotListenerCallbackEvent<T> = {\n          snapshots: snapshot.docs.map(documentSnapshot => ({\n            id: documentSnapshot.id,\n            path: documentSnapshot.ref.path,\n            data: documentSnapshot.data() as T,\n            metadata: {\n              hasPendingWrites: documentSnapshot.metadata.hasPendingWrites,\n              fromCache: documentSnapshot.metadata.fromCache,\n            },\n          })),\n        };\n        callback(event, undefined);\n      },\n      error => callback(null, error),\n    );\n    const id = Date.now().toString();\n    this.unsubscribesMap.set(id, unsubscribe);\n    return id;\n  }\n\n  public async removeSnapshotListener(\n    options: RemoveSnapshotListenerOptions,\n  ): Promise<void> {\n    const unsubscribe = this.unsubscribesMap.get(options.callbackId);\n\n    if (!unsubscribe) {\n      return;\n    }\n\n    unsubscribe();\n    this.unsubscribesMap.delete(options.callbackId);\n  }\n\n  public async removeAllListeners(): Promise<void> {\n    this.unsubscribesMap.forEach(unsubscribe => unsubscribe());\n    this.unsubscribesMap.clear();\n    await super.removeAllListeners();\n  }\n\n  private async buildCollectionQuery(\n    options:\n      | GetCollectionOptions\n      | GetCollectionGroupOptions\n      | AddCollectionSnapshotListenerOptions,\n    type: 'collection' | 'collectionGroup',\n  ): Promise<Query<DocumentData, DocumentData>> {\n    const firestore = getFirestore();\n    let collectionQuery: Query;\n    if (options.compositeFilter) {\n      const compositeFilter = this.buildFirebaseQueryCompositeFilterConstraint(\n        options.compositeFilter,\n      );\n      const queryConstraints =\n        await this.buildFirebaseQueryNonFilterConstraints(\n          options.queryConstraints || [],\n        );\n      collectionQuery = query(\n        type === 'collection'\n          ? collection(firestore, options.reference)\n          : collectionGroup(firestore, options.reference),\n        compositeFilter,\n        ...queryConstraints,\n      );\n    } else {\n      const queryConstraints = await this.buildFirebaseQueryConstraints(\n        options.queryConstraints || [],\n      );\n      collectionQuery = query(\n        type === 'collection'\n          ? collection(firestore, options.reference)\n          : collectionGroup(firestore, options.reference),\n        ...queryConstraints,\n      );\n    }\n    return collectionQuery;\n  }\n\n  private buildFirebaseQueryCompositeFilterConstraint(\n    compositeFilter: QueryCompositeFilterConstraint,\n  ): FirebaseQueryCompositeFilterConstraint {\n    const queryConstraints = this.buildFirebaseQueryFilterConstraints(\n      compositeFilter.queryConstraints,\n    );\n    if (compositeFilter.type === 'and') {\n      return and(...queryConstraints);\n    } else {\n      return or(...queryConstraints);\n    }\n  }\n\n  private buildFirebaseQueryFilterConstraints(\n    queryfilterConstraints: QueryFilterConstraint[],\n  ): FirebaseQueryFilterConstraint[] {\n    const firebaseQueryFilterConstraints: FirebaseQueryFilterConstraint[] = [];\n    for (const queryfilterConstraint of queryfilterConstraints) {\n      const firebaseQueryFilterConstraint =\n        this.buildFirebaseQueryFilterConstraint(queryfilterConstraint);\n      firebaseQueryFilterConstraints.push(firebaseQueryFilterConstraint);\n    }\n    return firebaseQueryFilterConstraints;\n  }\n\n  private buildFirebaseQueryFilterConstraint(\n    queryFilterConstraints: QueryFilterConstraint,\n  ): FirebaseQueryFilterConstraint {\n    if (queryFilterConstraints.type === 'where') {\n      return this.buildFirebaseQueryFieldFilterConstraint(\n        queryFilterConstraints,\n      );\n    } else {\n      return this.buildFirebaseQueryCompositeFilterConstraint(\n        queryFilterConstraints,\n      );\n    }\n  }\n\n  private buildFirebaseQueryFieldFilterConstraint(\n    queryfilterConstraints: QueryFieldFilterConstraint,\n  ): FirebaseQueryFieldFilterConstraint {\n    return where(\n      queryfilterConstraints.fieldPath,\n      queryfilterConstraints.opStr,\n      queryfilterConstraints.value,\n    );\n  }\n\n  private async buildFirebaseQueryNonFilterConstraints(\n    queryConstraints: QueryNonFilterConstraint[],\n  ): Promise<FirebaseQueryNonFilterConstraint[]> {\n    const firebaseQueryNonFilterConstraints: FirebaseQueryNonFilterConstraint[] =\n      [];\n    for (const queryConstraint of queryConstraints) {\n      const firebaseQueryNonFilterConstraint =\n        await this.buildFirebaseQueryNonFilterConstraint(queryConstraint);\n      firebaseQueryNonFilterConstraints.push(firebaseQueryNonFilterConstraint);\n    }\n    return firebaseQueryNonFilterConstraints;\n  }\n\n  private async buildFirebaseQueryNonFilterConstraint(\n    queryConstraints: QueryNonFilterConstraint,\n  ): Promise<FirebaseQueryNonFilterConstraint> {\n    switch (queryConstraints.type) {\n      case 'orderBy':\n        return orderBy(\n          queryConstraints.fieldPath,\n          queryConstraints.directionStr,\n        );\n      case 'limit':\n        return limit(queryConstraints.limit);\n      case 'limitToLast':\n        return limitToLast(queryConstraints.limit);\n      case 'startAt':\n      case 'startAfter':\n      case 'endAt':\n      case 'endBefore': {\n        const firestore = getFirestore();\n        const documentSnapshot = await getDoc(\n          doc(firestore, queryConstraints.reference),\n        );\n        switch (queryConstraints.type) {\n          case 'startAt':\n            return startAt(documentSnapshot);\n          case 'startAfter':\n            return startAfter(documentSnapshot);\n          case 'endAt':\n            return endAt(documentSnapshot);\n          case 'endBefore':\n            return endBefore(documentSnapshot);\n        }\n      }\n    }\n  }\n\n  private async buildFirebaseQueryConstraints(\n    queryConstraints: QueryConstraint[],\n  ): Promise<FirebaseQueryConstraint[]> {\n    const firebaseQueryConstraints: FirebaseQueryConstraint[] = [];\n    for (const queryConstraint of queryConstraints) {\n      const firebaseQueryConstraint =\n        await this.buildFirebaseQueryConstraint(queryConstraint);\n      firebaseQueryConstraints.push(firebaseQueryConstraint);\n    }\n    return firebaseQueryConstraints;\n  }\n\n  private async buildFirebaseQueryConstraint(\n    queryConstraint: QueryConstraint,\n  ): Promise<FirebaseQueryConstraint> {\n    if (queryConstraint.type === 'where') {\n      return this.buildFirebaseQueryFieldFilterConstraint(queryConstraint);\n    } else {\n      return await this.buildFirebaseQueryNonFilterConstraint(queryConstraint);\n    }\n  }\n}\n"]}
{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import type { PermissionState } from '@capacitor/core';\nimport { WebPlugin } from '@capacitor/core';\nimport type { MessagePayload } from 'firebase/messaging';\nimport {\n  deleteToken,\n  getMessaging,\n  getToken,\n  isSupported as isSupportedInWeb,\n  onMessage,\n} from 'firebase/messaging';\n\nimport type {\n  Channel,\n  DeleteChannelOptions,\n  FirebaseMessagingPlugin,\n  GetDeliveredNotificationsResult,\n  GetTokenOptions,\n  GetTokenResult,\n  IsSupportedResult,\n  ListChannelsResult,\n  NotificationReceivedEvent,\n  PermissionStatus,\n  RemoveDeliveredNotificationsOptions,\n  SubscribeToTopicOptions,\n  UnsubscribeFromTopicOptions,\n} from './definitions';\nimport { Notification } from './definitions';\n\nexport class FirebaseMessagingWeb\n  extends WebPlugin\n  implements FirebaseMessagingPlugin\n{\n  public static readonly notificationReceivedEvent = 'notificationReceived';\n\n  constructor() {\n    super();\n    isSupportedInWeb().then(supported => {\n      if (!supported) {\n        return;\n      }\n      const messaging = getMessaging();\n      onMessage(messaging, payload => this.handleNotificationReceived(payload));\n    });\n  }\n\n  public async checkPermissions(): Promise<PermissionStatus> {\n    const isSupported = await isSupportedInWeb();\n    if (!isSupported) {\n      return {\n        receive: 'denied',\n      };\n    }\n    const receive = this.convertNotificationPermissionToPermissionState(\n      Notification.permission,\n    );\n    return {\n      receive,\n    };\n  }\n\n  public async requestPermissions(): Promise<PermissionStatus> {\n    const isSupported = await isSupportedInWeb();\n    if (!isSupported) {\n      return {\n        receive: 'denied',\n      };\n    }\n    const notificationPermission = await Notification.requestPermission();\n    const receive = this.convertNotificationPermissionToPermissionState(\n      notificationPermission,\n    );\n    return {\n      receive,\n    };\n  }\n\n  public async isSupported(): Promise<IsSupportedResult> {\n    const isSupported = await isSupportedInWeb();\n    return {\n      isSupported,\n    };\n  }\n\n  public async getToken(options: GetTokenOptions): Promise<GetTokenResult> {\n    const messaging = getMessaging();\n    const token = await getToken(messaging, {\n      vapidKey: options.vapidKey,\n      serviceWorkerRegistration: options.serviceWorkerRegistration,\n    });\n    return {\n      token,\n    };\n  }\n\n  public async deleteToken(): Promise<void> {\n    const messaging = getMessaging();\n    await deleteToken(messaging);\n  }\n\n  public async getDeliveredNotifications(): Promise<GetDeliveredNotificationsResult> {\n    this.throwUnavailableError();\n  }\n\n  public async removeDeliveredNotifications(\n    _options: RemoveDeliveredNotificationsOptions,\n  ): Promise<void> {\n    this.throwUnavailableError();\n  }\n\n  public async removeAllDeliveredNotifications(): Promise<void> {\n    this.throwUnavailableError();\n  }\n\n  public async subscribeToTopic(\n    _options: SubscribeToTopicOptions,\n  ): Promise<void> {\n    this.throwUnavailableError();\n  }\n\n  public async unsubscribeFromTopic(\n    _options: UnsubscribeFromTopicOptions,\n  ): Promise<void> {\n    this.throwUnavailableError();\n  }\n\n  public async createChannel(_options: Channel): Promise<void> {\n    this.throwUnavailableError();\n  }\n\n  public async deleteChannel(_options: DeleteChannelOptions): Promise<void> {\n    this.throwUnavailableError();\n  }\n\n  public async listChannels(): Promise<ListChannelsResult> {\n    this.throwUnavailableError();\n  }\n\n  private handleNotificationReceived(messagePayload: MessagePayload): void {\n    const notification = this.createNotificationResult(messagePayload);\n    const event: NotificationReceivedEvent = {\n      notification,\n    };\n    this.notifyListeners(FirebaseMessagingWeb.notificationReceivedEvent, event);\n  }\n\n  private createNotificationResult(\n    messagePayload: MessagePayload,\n  ): Notification {\n    const notification: Notification = {\n      body: messagePayload.notification?.body,\n      data: messagePayload.data,\n      id: messagePayload.messageId,\n      image: messagePayload.notification?.image,\n      title: messagePayload.notification?.title,\n    };\n    return notification;\n  }\n\n  private convertNotificationPermissionToPermissionState(\n    permission: NotificationPermission,\n  ) {\n    let state: PermissionState = 'prompt';\n    switch (permission) {\n      case 'granted':\n        state = 'granted';\n        break;\n      case 'denied':\n        state = 'denied';\n        break;\n    }\n    return state;\n  }\n\n  private throwUnavailableError(): never {\n    throw this.unavailable('Not available on web.');\n  }\n}\n"]}
{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA,wCAAwC;AAqXxC;;;;;;GAMG;AACH,MAAM,CAAN,IAAY,UAqBX;AArBD,WAAY,UAAU;IACpB;;OAEG;IACH,yCAAO,CAAA;IACP;;OAEG;IACH,yCAAO,CAAA;IACP;;OAEG;IACH,iDAAW,CAAA;IACX;;OAEG;IACH,2CAAQ,CAAA;IACR;;OAEG;IACH,yCAAO,CAAA;AACT,CAAC,EArBW,UAAU,KAAV,UAAU,QAqBrB;AAED;;;;;;GAMG;AACH,MAAM,CAAN,IAAY,UAaX;AAbD,WAAY,UAAU;IACpB;;OAEG;IACH,gDAAW,CAAA;IACX;;OAEG;IACH,iDAAW,CAAA;IACX;;OAEG;IACH,+CAAU,CAAA;AACZ,CAAC,EAbW,UAAU,KAAV,UAAU,QAarB","sourcesContent":["/// <reference types=\"@capacitor/cli\" />\n\nimport type { PermissionState, PluginListenerHandle } from '@capacitor/core';\n\nexport type PresentationOption = 'badge' | 'sound' | 'alert' | 'criticalAlert';\n\ndeclare module '@capacitor/cli' {\n  export interface PluginsConfig {\n    /**\n     * On iOS you can configure the way the push notifications are displayed when the app is in foreground.\n     */\n    FirebaseMessaging?: {\n      /**\n       * This is an array of strings you can combine. Possible values in the array are:\n       *   - `badge`: badge count on the app icon is updated (default value)\n       *   - `sound`: the device will ring/vibrate when the push notification is received\n       *   - `alert`: the push notification is displayed in a native dialog\n       *   - `criticalAlert`: the push notification is displayed in a native dialog and bypasses the mute switch\n       *\n       * An empty array can be provided if none of the options are desired.\n       *\n       * Only available for iOS.\n       *\n       * @example [\"alert\", \"badge\", \"sound\"]\n       * @default [\"alert\", \"badge\", \"sound\"]\n       * @since 0.2.2\n       */\n      presentationOptions: PresentationOption[];\n    };\n  }\n}\n\nexport interface FirebaseMessagingPlugin {\n  /**\n   * Check permission to receive push notifications.\n   *\n   * On **Android**, this method only needs to be called on Android 13+.\n   *\n   * @since 0.2.2\n   */\n  checkPermissions(): Promise<PermissionStatus>;\n  /**\n   * Request permission to receive push notifications.\n   *\n   * On **Android**, this method only needs to be called on Android 13+.\n   *\n   * @since 0.2.2\n   */\n  requestPermissions(): Promise<PermissionStatus>;\n  /**\n   * Checks if all required APIs exist.\n   *\n   * Always returns `true` on Android and iOS.\n   *\n   * @since 0.3.1\n   */\n  isSupported(): Promise<IsSupportedResult>;\n  /**\n   * Register the app to receive push notifications.\n   * Returns a FCM token that can be used to send push messages to that Messaging instance.\n   *\n   * This method also re-enables FCM auto-init.\n   *\n   * @since 0.2.2\n   */\n  getToken(options?: GetTokenOptions): Promise<GetTokenResult>;\n  /**\n   * Delete the FCM token and unregister the app to stop receiving push notifications.\n   * Can be called, for example, when a user signs out.\n   *\n   * @since 0.2.2\n   */\n  deleteToken(): Promise<void>;\n  /**\n   * Get a list of notifications that are visible on the notifications screen.\n   *\n   * @since 0.2.2\n   */\n  getDeliveredNotifications(): Promise<GetDeliveredNotificationsResult>;\n  /**\n   * Remove specific notifications from the notifications screen.\n   *\n   * @since 0.2.2\n   */\n  removeDeliveredNotifications(\n    options: RemoveDeliveredNotificationsOptions,\n  ): Promise<void>;\n  /**\n   * Remove all notifications from the notifications screen.\n   *\n   * @since 0.2.2\n   */\n  removeAllDeliveredNotifications(): Promise<void>;\n  /**\n   * Subscribes to topic in the background.\n   *\n   * Only available for Android and iOS.\n   *\n   * @since 0.2.2\n   */\n  subscribeToTopic(options: SubscribeToTopicOptions): Promise<void>;\n  /**\n   * Unsubscribes from topic in the background.\n   *\n   * Only available for Android and iOS.\n   *\n   * @since 0.2.2\n   */\n  unsubscribeFromTopic(options: UnsubscribeFromTopicOptions): Promise<void>;\n  /**\n   * Create a notification channel.\n   *\n   * Only available for Android (SDK 26+).\n   *\n   * @since 1.4.0\n   */\n  createChannel(options: CreateChannelOptions): Promise<void>;\n  /**\n   * Delete a notification channel.\n   *\n   * Only available for Android (SDK 26+).\n   *\n   * @since 1.4.0\n   */\n  deleteChannel(options: DeleteChannelOptions): Promise<void>;\n  /**\n   * List the available notification channels.\n   *\n   * Only available for Android (SDK 26+).\n   *\n   * @since 1.4.0\n   */\n  listChannels(): Promise<ListChannelsResult>;\n  /**\n   * Called when a new FCM token is received.\n   *\n   * Only available for Android and iOS.\n   *\n   * @since 0.2.2\n   */\n  addListener(\n    eventName: 'tokenReceived',\n    listenerFunc: TokenReceivedListener,\n  ): Promise<PluginListenerHandle>;\n  /**\n   * Called when a new push notification is received.\n   *\n   * On **Android**, this listener is called for every push notification if the app is in the _foreground_.\n   * If the app is in the _background_, then this listener is only called on data push notifications.\n   * See https://firebase.google.com/docs/cloud-messaging/android/receive#handling_messages for more information.\n   *\n   * On **iOS**, this listener is called for every push notification if the app is in the _foreground_.\n   * If the app is in the _background_, then this listener is only called for silent push notifications (messages with the `content-available` key).\n   * See https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/PayloadKeyReference.html for more information.\n   *\n   * @since 0.2.2\n   */\n  addListener(\n    eventName: 'notificationReceived',\n    listenerFunc: NotificationReceivedListener,\n  ): Promise<PluginListenerHandle>;\n  /**\n   * Called when a new push notification action is performed.\n   *\n   * Only available for Android and iOS.\n   *\n   * @since 0.2.2\n   */\n  addListener(\n    eventName: 'notificationActionPerformed',\n    listenerFunc: NotificationActionPerformedListener,\n  ): Promise<PluginListenerHandle>;\n  /**\n   * Remove all listeners for this plugin.\n   *\n   * @since 0.2.2\n   */\n  removeAllListeners(): Promise<void>;\n}\n\n/**\n * @since 0.2.2\n */\nexport interface PermissionStatus {\n  /**\n   * @since 0.2.2\n   */\n  receive: PermissionState;\n}\n\n/**\n * @since 0.2.2\n */\nexport interface GetTokenOptions {\n  /**\n   * Your VAPID public key, which is required to retrieve the current registration token on the web.\n   *\n   * Only available for Web.\n   */\n  vapidKey?: string;\n  /**\n   * The service worker registration for receiving push messaging.\n   * If the registration is not provided explicitly, you need to have a `firebase-messaging-sw.js` at your root location.\n   *\n   * Only available for Web.\n   */\n  serviceWorkerRegistration?: ServiceWorkerRegistration;\n}\n\n/**\n * @since 0.3.1\n */\nexport interface IsSupportedResult {\n  /**\n   * @since 0.3.1\n   */\n  isSupported: boolean;\n}\n\n/**\n * @since 0.2.2\n */\nexport interface GetTokenResult {\n  /**\n   * @since 0.2.2\n   */\n  token: string;\n}\n\n/**\n * @since 0.2.2\n */\nexport interface GetDeliveredNotificationsResult {\n  /**\n   * @since 0.2.2\n   */\n  notifications: Notification[];\n}\n\n/**\n * @since 0.2.2\n */\nexport interface RemoveDeliveredNotificationsOptions {\n  /**\n   * @since 0.4.0\n   */\n  notifications: Notification[];\n}\n\n/**\n * @since 0.2.2\n */\nexport interface SubscribeToTopicOptions {\n  /**\n   * The name of the topic to subscribe.\n   *\n   * @since 0.2.2\n   */\n  topic: string;\n}\n\n/**\n * @since 0.2.2\n */\nexport interface UnsubscribeFromTopicOptions {\n  /**\n   * The name of the topic to unsubscribe from.\n   *\n   * @since 0.2.2\n   */\n  topic: string;\n}\n\n/**\n * @since 1.4.0\n */\nexport type CreateChannelOptions = Channel;\n\n/**\n * @since 1.4.0\n */\nexport interface DeleteChannelOptions {\n  /**\n   * The channel identifier.\n   *\n   * @since 1.4.0\n   */\n  id: string;\n}\n\n/**\n * @since 1.4.0\n */\nexport interface ListChannelsResult {\n  channels: Channel[];\n}\n\n/**\n * @since 1.4.0\n */\nexport interface Channel {\n  /**\n   * The description of this channel (presented to the user).\n   *\n   * @since 1.4.0\n   */\n  description?: string;\n  /**\n   * The channel identifier.\n   *\n   * @since 1.4.0\n   */\n  id: string;\n  /**\n   * The level of interruption for notifications posted to this channel.\n   *\n   * @since 1.4.0\n   */\n  importance?: Importance;\n  /**\n   * The light color for notifications posted to this channel.\n   *\n   * Only supported if lights are enabled on this channel and the device\n   * supports it.\n   *\n   * Supported color formats are `#RRGGBB` and `#RRGGBBAA`.\n   *\n   * @since 1.4.0\n   */\n  lightColor?: string;\n  /**\n   * Whether notifications posted to this channel should display notification\n   * lights, on devices that support it.\n   *\n   * @since 1.4.0\n   */\n  lights?: boolean;\n  /**\n   * The name of this channel (presented to the user).\n   *\n   * @since 1.4.0\n   */\n  name: string;\n  /**\n   * The sound that should be played for notifications posted to this channel.\n   *\n   * Notification channels with an importance of at least `3` should have a\n   * sound.\n   *\n   * The file name of a sound file should be specified relative to the android\n   * app `res/raw` directory.\n   *\n   * @since 1.4.0\n   * @example \"jingle.wav\"\n   */\n  sound?: string;\n  /**\n   * Whether notifications posted to this channel should vibrate.\n   *\n   * @since 1.4.0\n   */\n  vibration?: boolean;\n  /**\n   * The visibility of notifications posted to this channel.\n   *\n   * This setting is for whether notifications posted to this channel appear on\n   * the lockscreen or not, and if so, whether they appear in a redacted form.\n   *\n   * @since 1.4.0\n   */\n  visibility?: Visibility;\n}\n\n/**\n * The importance level.\n *\n * For more details, see the [Android Developer Docs](https://developer.android.com/reference/android/app/NotificationManager#IMPORTANCE_DEFAULT)\n *\n * @since 1.4.0\n */\nexport enum Importance {\n  /**\n   * @since 1.4.0\n   */\n  Min = 1,\n  /**\n   * @since 1.4.0\n   */\n  Low = 2,\n  /**\n   * @since 1.4.0\n   */\n  Default = 3,\n  /**\n   * @since 1.4.0\n   */\n  High = 4,\n  /**\n   * @since 1.4.0\n   */\n  Max = 5,\n}\n\n/**\n * The notification visibility.\n *\n * For more details, see the [Android Developer Docs](https://developer.android.com/reference/androidx/core/app/NotificationCompat#VISIBILITY_PRIVATE())\n *\n * @since 1.4.0\n */\nexport enum Visibility {\n  /**\n   * @since 1.4.0\n   */\n  Secret = -1,\n  /**\n   * @since 1.4.0\n   */\n  Private = 0,\n  /**\n   * @since 1.4.0\n   */\n  Public = 1,\n}\n\n/**\n * Callback to receive the token received event.\n *\n * @since 0.2.2\n */\nexport type TokenReceivedListener = (event: TokenReceivedEvent) => void;\n\n/**\n * Callback to receive the notification received event.\n *\n * @since 0.2.2\n */\nexport type NotificationReceivedListener = (\n  event: NotificationReceivedEvent,\n) => void;\n\n/**\n * Callback to receive the notification action performed event.\n *\n * @since 0.2.2\n */\nexport type NotificationActionPerformedListener = (\n  event: NotificationActionPerformedEvent,\n) => void;\n\n/**\n * @since 0.2.2\n */\nexport interface TokenReceivedEvent {\n  /**\n   * @since 0.2.2\n   */\n  token: string;\n}\n\n/**\n * @since 0.2.2\n */\nexport interface NotificationReceivedEvent {\n  /**\n   * @since 0.2.2\n   */\n  notification: Notification;\n}\n\n/**\n * @since 0.2.2\n */\nexport interface NotificationActionPerformedEvent {\n  /**\n   * The action performed on the notification.\n   *\n   * @since 0.2.2\n   */\n  actionId: string;\n  /**\n   * Text entered on the notification action.\n   *\n   * Only available for iOS.\n   *\n   * @since 0.2.2\n   */\n  inputValue?: string;\n  /**\n   * The notification in which the action was performed.\n   *\n   * @since 0.2.2\n   */\n  notification: Notification;\n}\n\n/**\n * @since 0.2.2\n */\nexport interface Notification {\n  /**\n   * The notification payload.\n   *\n   * @since 0.2.2\n   */\n  body?: string;\n  /**\n   * The action to be performed on the user opening the notification.\n   *\n   * Only available for Android.\n   *\n   * @since 0.2.2\n   */\n  clickAction?: string;\n  /**\n   * Any additional data that was included in the push notification payload.\n   *\n   * @since 0.2.2\n   */\n  data?: unknown;\n  /**\n   * The notification identifier.\n   *\n   * @since 0.2.2\n   */\n  id?: string;\n  /**\n   * The URL of an image that is downloaded on the device and displayed in the notification.\n   *\n   * Only available for Web.\n   *\n   * @since 0.2.2\n   */\n  image?: string;\n  /**\n   * Deep link from the notification.\n   *\n   * Only available for Android.\n   *\n   * @since 0.2.2\n   */\n  link?: string;\n  /**\n   * The notification subtitle.\n   *\n   * Only available for iOS.\n   *\n   * @since 0.2.2\n   */\n  subtitle?: string;\n  /**\n   * The notification string identifier.\n   *\n   * Only available for Android.\n   *\n   * @since 0.4.0\n   */\n  tag?: string;\n  /**\n   * The notification title.\n   *\n   * @since 0.2.2\n   */\n  title?: string;\n}\n"]}
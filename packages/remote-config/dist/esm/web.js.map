{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAC5C,OAAO,EACL,QAAQ,EACR,gBAAgB,EAChB,WAAW,EACX,UAAU,EACV,SAAS,EACT,eAAe,EACf,SAAS,GACV,MAAM,wBAAwB,CAAC;AAchC,MAAM,OAAO,uBACX,SAAQ,SAAS;IAGV,KAAK,CAAC,QAAQ;QACnB,MAAM,YAAY,GAAG,eAAe,EAAE,CAAC;QACvC,MAAM,QAAQ,CAAC,YAAY,CAAC,CAAC;IAC/B,CAAC;IAEM,KAAK,CAAC,gBAAgB;QAC3B,MAAM,YAAY,GAAG,eAAe,EAAE,CAAC;QACvC,MAAM,gBAAgB,CAAC,YAAY,CAAC,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,WAAW;QACtB,MAAM,YAAY,GAAG,eAAe,EAAE,CAAC;QACvC,MAAM,WAAW,CAAC,YAAY,CAAC,CAAC;IAClC,CAAC;IAEM,KAAK,CAAC,UAAU,CAAC,OAAmB;QACzC,MAAM,YAAY,GAAG,eAAe,EAAE,CAAC;QACvC,MAAM,KAAK,GAAG,UAAU,CAAC,YAAY,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;QACpD,OAAO,EAAE,KAAK,EAAE,CAAC;IACnB,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,OAAmB;QACxC,MAAM,YAAY,GAAG,eAAe,EAAE,CAAC;QACvC,MAAM,KAAK,GAAG,SAAS,CAAC,YAAY,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;QACnD,OAAO,EAAE,KAAK,EAAE,CAAC;IACnB,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,OAAmB;QACxC,MAAM,YAAY,GAAG,eAAe,EAAE,CAAC;QACvC,MAAM,KAAK,GAAG,SAAS,CAAC,YAAY,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;QACnD,OAAO,EAAE,KAAK,EAAE,CAAC;IACnB,CAAC;IAEM,KAAK,CAAC,uBAAuB,CAClC,OAAuC;QAEvC,MAAM,YAAY,GAAG,eAAe,EAAE,CAAC;QACvC,YAAY,CAAC,QAAQ,CAAC,0BAA0B;YAC9C,OAAO,CAAC,6BAA6B,GAAG,IAAI,CAAC;IACjD,CAAC;IAEM,KAAK,CAAC,WAAW,CAAC,OAA2B;QAClD,MAAM,YAAY,GAAG,eAAe,EAAE,CAAC;QACvC,IAAI,OAAO,CAAC,qBAAqB,KAAK,SAAS,EAAE;YAC/C,YAAY,CAAC,QAAQ,CAAC,kBAAkB;gBACtC,OAAO,CAAC,qBAAqB,GAAG,IAAI,CAAC;SACxC;QACD,IAAI,OAAO,CAAC,6BAA6B,KAAK,SAAS,EAAE;YACvD,YAAY,CAAC,QAAQ,CAAC,0BAA0B;gBAC9C,OAAO,CAAC,6BAA6B,GAAG,IAAI,CAAC;SAChD;IACH,CAAC;IAEM,KAAK,CAAC,uBAAuB,CAClC,SAAiD;QAEjD,IAAI,CAAC,uBAAuB,EAAE,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,0BAA0B,CACrC,QAA2C;QAE3C,IAAI,CAAC,uBAAuB,EAAE,CAAC;IACjC,CAAC;IAEO,uBAAuB;QAC7B,MAAM,IAAI,CAAC,aAAa,CAAC,yBAAyB,CAAC,CAAC;IACtD,CAAC;CACF","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport {\n  activate,\n  fetchAndActivate,\n  fetchConfig,\n  getBoolean,\n  getNumber,\n  getRemoteConfig,\n  getString,\n} from 'firebase/remote-config';\n\nimport type {\n  AddConfigUpdateListenerOptionsCallback,\n  FirebaseRemoteConfigPlugin,\n  GetBooleanResult,\n  GetNumberResult,\n  GetOptions,\n  GetStringResult,\n  RemoveConfigUpdateListenerOptions,\n  SetMinimumFetchIntervalOptions,\n  SetSettingsOptions,\n} from './definitions';\n\nexport class FirebaseRemoteConfigWeb\n  extends WebPlugin\n  implements FirebaseRemoteConfigPlugin\n{\n  public async activate(): Promise<void> {\n    const remoteConfig = getRemoteConfig();\n    await activate(remoteConfig);\n  }\n\n  public async fetchAndActivate(): Promise<void> {\n    const remoteConfig = getRemoteConfig();\n    await fetchAndActivate(remoteConfig);\n  }\n\n  public async fetchConfig(): Promise<void> {\n    const remoteConfig = getRemoteConfig();\n    await fetchConfig(remoteConfig);\n  }\n\n  public async getBoolean(options: GetOptions): Promise<GetBooleanResult> {\n    const remoteConfig = getRemoteConfig();\n    const value = getBoolean(remoteConfig, options.key);\n    return { value };\n  }\n\n  public async getNumber(options: GetOptions): Promise<GetNumberResult> {\n    const remoteConfig = getRemoteConfig();\n    const value = getNumber(remoteConfig, options.key);\n    return { value };\n  }\n\n  public async getString(options: GetOptions): Promise<GetStringResult> {\n    const remoteConfig = getRemoteConfig();\n    const value = getString(remoteConfig, options.key);\n    return { value };\n  }\n\n  public async setMinimumFetchInterval(\n    options: SetMinimumFetchIntervalOptions,\n  ): Promise<void> {\n    const remoteConfig = getRemoteConfig();\n    remoteConfig.settings.minimumFetchIntervalMillis =\n      options.minimumFetchIntervalInSeconds * 1000;\n  }\n\n  public async setSettings(options: SetSettingsOptions): Promise<void> {\n    const remoteConfig = getRemoteConfig();\n    if (options.fetchTimeoutInSeconds !== undefined) {\n      remoteConfig.settings.fetchTimeoutMillis =\n        options.fetchTimeoutInSeconds * 1000;\n    }\n    if (options.minimumFetchIntervalInSeconds !== undefined) {\n      remoteConfig.settings.minimumFetchIntervalMillis =\n        options.minimumFetchIntervalInSeconds * 1000;\n    }\n  }\n\n  public async addConfigUpdateListener(\n    _callback: AddConfigUpdateListenerOptionsCallback,\n  ): Promise<string> {\n    this.throwUnimplementedError();\n  }\n\n  public async removeConfigUpdateListener(\n    _options: RemoveConfigUpdateListenerOptions,\n  ): Promise<void> {\n    this.throwUnimplementedError();\n  }\n\n  private throwUnimplementedError(): never {\n    throw this.unimplemented('Not implemented on web.');\n  }\n}\n"]}
{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAC5C,OAAO,EACL,wBAAwB,EACxB,YAAY,EACZ,aAAa,EACb,oBAAoB,GACrB,MAAM,oBAAoB,CAAC;AAW5B,MAAM,OAAO,oBACX,SAAQ,SAAS;IAGV,KAAK,CAAC,UAAU,CACrB,OAAuC;QAEvC,MAAM,SAAS,GAAG,YAAY,CAAC,SAAS,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;QAC1D,MAAM,QAAQ,GAAG,aAAa,CAC5B,SAAS,EACT,OAAO,CAAC,IAAI,CACb,CAAC;QACF,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC5C,OAAO;YACL,IAAI,EAAE,MAAM,CAAC,IAAI;SAClB,CAAC;IACJ,CAAC;IAEM,KAAK,CAAC,SAAS,CACpB,OAAsC;QAEtC,MAAM,SAAS,GAAG,YAAY,EAAE,CAAC;QACjC,MAAM,QAAQ,GAAG,oBAAoB,CACnC,SAAS,EACT,OAAO,CAAC,GAAG,CACZ,CAAC;QACF,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC5C,OAAO;YACL,IAAI,EAAE,MAAM,CAAC,IAAI;SAClB,CAAC;IACJ,CAAC;IAEM,KAAK,CAAC,WAAW,CAAC,OAA2B;QAClD,MAAM,SAAS,GAAG,YAAY,CAAC,SAAS,EAAE,OAAO,CAAC,oBAAoB,CAAC,CAAC;QACxE,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC;QAClC,wBAAwB,CAAC,SAAS,EAAE,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC1D,CAAC;CACF","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport {\n  connectFunctionsEmulator,\n  getFunctions,\n  httpsCallable,\n  httpsCallableFromURL,\n} from 'firebase/functions';\n\nimport type {\n  CallByNameOptions,\n  CallByNameResult,\n  CallByUrlOptions,\n  CallResult,\n  FirebaseFunctionsPlugin,\n  UseEmulatorOptions,\n} from './definitions';\n\nexport class FirebaseFunctionsWeb\n  extends WebPlugin\n  implements FirebaseFunctionsPlugin\n{\n  public async callByName<RequestData = unknown, ResponseData = unknown>(\n    options: CallByNameOptions<RequestData>,\n  ): Promise<CallByNameResult<ResponseData>> {\n    const functions = getFunctions(undefined, options.region);\n    const callable = httpsCallable<RequestData, ResponseData>(\n      functions,\n      options.name,\n    );\n    const result = await callable(options.data);\n    return {\n      data: result.data,\n    };\n  }\n\n  public async callByUrl<RequestData = unknown, ResponseData = unknown>(\n    options: CallByUrlOptions<RequestData>,\n  ): Promise<CallResult<ResponseData>> {\n    const functions = getFunctions();\n    const callable = httpsCallableFromURL<RequestData, ResponseData>(\n      functions,\n      options.url,\n    );\n    const result = await callable(options.data);\n    return {\n      data: result.data,\n    };\n  }\n\n  public async useEmulator(options: UseEmulatorOptions): Promise<void> {\n    const functions = getFunctions(undefined, options.regionOrCustomDomain);\n    const port = options.port || 5001;\n    connectFunctionsEmulator(functions, options.host, port);\n  }\n}\n"]}
{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface FirebaseAppCheckPlugin {\n  /**\n   * Get the current App Check token.\n   *\n   * @since 1.3.0\n   */\n  getToken(options?: GetTokenOptions): Promise<GetTokenResult>;\n  /**\n   * Activate App Check for the given app.\n   * Can be called only once per app.\n   *\n   * @since 1.3.0\n   */\n  initialize(options?: InitializeOptions): Promise<void>;\n  /**\n   * Set whether the App Check token should be refreshed automatically or not.\n   *\n   * @since 1.3.0\n   */\n  setTokenAutoRefreshEnabled(\n    options: SetTokenAutoRefreshEnabledOptions,\n  ): Promise<void>;\n  /**\n   * Called when the App Check token changed.\n   *\n   * Only available for Web.\n   *\n   * @since 1.3.0\n   */\n  addListener(\n    eventName: 'tokenChanged',\n    listenerFunc: TokenChangedListener,\n  ): Promise<PluginListenerHandle>;\n  /**\n   * Remove all listeners for this plugin.\n   *\n   * Only available for Web.\n   *\n   * @since 1.3.0\n   */\n  removeAllListeners(): Promise<void>;\n}\n\n/**\n * @since 1.3.0\n */\nexport interface GetTokenOptions {\n  /**\n   * If `true`, will always try to fetch a fresh token.\n   * If `false`, will use a cached token if found in storage.\n   *\n   * @since 1.3.0\n   * @default false\n   */\n  forceRefresh?: boolean;\n}\n\n/**\n * @since 1.3.0\n */\nexport interface GetTokenResult {\n  /**\n   * The App Check token in JWT format.\n   *\n   * @since 1.3.0\n   */\n  token: string;\n  /**\n   * The timestamp after which the token will expire in milliseconds since epoch.\n   *\n   * Only available for Android and iOS.\n   *\n   * @since 1.3.0\n   */\n  expireTimeMillis?: number;\n}\n\n/**\n * @since 1.3.0\n */\nexport interface InitializeOptions {\n  /**\n   * If `true`, the debug provider is used.\n   *\n   * ⚠️ **Attention**: The debug provider allows access to your Firebase resources from unverified devices.\n   * Don't use the debug provider in production builds of your app, and don't share your debug builds with untrusted parties.\n   *\n   * ⚠️ **Deprecated**: Use `debugToken` instead. This option will be removed in the next major version.\n   *\n   * Read more: https://firebase.google.com/docs/app-check/web/debug-provider\n   *\n   * @since 1.3.0\n   * @deprecated Use `debugToken` instead. This option will be removed in the next major version.\n   * @default false\n   */\n  debug?: boolean;\n  /**\n   * If `true`, the debug provider is used.\n   *\n   * On **Web**, you can also set a predefined debug token string instead of `true`. On Android and iOS, you have to use environment variables for this.\n   *\n   * ⚠️ **Attention**: The debug provider allows access to your Firebase resources from unverified devices.\n   * Don't use the debug provider in production builds of your app, and don't share your debug builds with untrusted parties.\n   *\n   * @since 7.1.0\n   * @default false\n   * @see https://firebase.google.com/docs/app-check/android/debug-provider#ci\n   * @see https://firebase.google.com/docs/app-check/ios/debug-provider#ci\n   * @see https://firebase.google.com/docs/app-check/web/debug-provider\n   */\n  debugToken?: boolean | string;\n  /**\n   * If `true`, the SDK automatically refreshes App Check tokens as needed.\n   *\n   * @since 1.3.0\n   * @default false\n   */\n  isTokenAutoRefreshEnabled?: boolean;\n  /**\n   * The provider to use for App Check. Must be an instance of\n   * `ReCaptchaV3Provider`, `ReCaptchaEnterpriseProvider`, or `CustomProvider`.\n   *\n   * Only available for Web.\n   *\n   * @since 7.1.0\n   * @default ReCaptchaV3Provider\n   * @see https://firebase.google.com/docs/app-check/web/custom-provider\n   */\n  provider?: any;\n  /**\n   * The reCAPTCHA v3 site key (public key). This option is ignored when `provider` is set.\n   *\n   * Only available for Web.\n   *\n   * @deprecated Use `provider` instead.\n   * @since 1.3.0\n   */\n  siteKey?: string;\n}\n\n/**\n * @since 1.3.0\n */\nexport interface SetTokenAutoRefreshEnabledOptions {\n  /**\n   * If `true`, the SDK automatically refreshes App Check tokens as needed.\n   * This overrides any value set during initializeAppCheck().\n   *\n   * @since 1.3.0\n   */\n  enabled: boolean;\n}\n\n/**\n * Callback to receive the token change event.\n *\n * @since 1.3.0\n */\nexport type TokenChangedListener = (event: TokenChangedEvent) => void;\n\n/**\n * @since 1.3.0\n */\nexport interface TokenChangedEvent {\n  /**\n   * The App Check token in JWT format.\n   *\n   * @since 1.3.0\n   */\n  token: string;\n}\n"]}
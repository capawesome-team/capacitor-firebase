{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport { getApp } from 'firebase/app';\nimport type {\n  AppCheck,\n  AppCheckTokenResult,\n  Unsubscribe,\n} from 'firebase/app-check';\nimport {\n  getToken,\n  initializeAppCheck,\n  onTokenChanged,\n  setTokenAutoRefreshEnabled,\n} from 'firebase/app-check';\n\nimport type {\n  FirebaseAppCheckPlugin,\n  GetTokenOptions,\n  GetTokenResult,\n  InitializeOptions,\n  SetTokenAutoRefreshEnabledOptions,\n  TokenChangedEvent,\n} from './definitions';\n\ndeclare global {\n  interface Window {\n    FIREBASE_APPCHECK_DEBUG_TOKEN: boolean | string;\n  }\n}\n\nexport class FirebaseAppCheckWeb\n  extends WebPlugin\n  implements FirebaseAppCheckPlugin\n{\n  public static readonly tokenChangedEvent = 'tokenChanged';\n  public static readonly errorNotInitialized =\n    'AppCheck has not been initialized.';\n  public static readonly errorSiteKeyMissing = 'siteKey must be provided.';\n\n  private _appCheckInstance: AppCheck | undefined;\n  get appCheckInstance(): AppCheck | undefined {\n    return this._appCheckInstance;\n  }\n  set appCheckInstance(value: AppCheck | undefined) {\n    this._appCheckInstance = value;\n    if (value) {\n      this.registerOnTokenChangedListener();\n    } else {\n      this.unregisterOnTokenChangedListener();\n    }\n  }\n  private onTokenChangedListenerUnsubscribe: Unsubscribe | undefined;\n\n  public async getToken(options?: GetTokenOptions): Promise<GetTokenResult> {\n    if (!this.appCheckInstance) {\n      throw new Error(FirebaseAppCheckWeb.errorNotInitialized);\n    }\n    const result = await getToken(this.appCheckInstance, options?.forceRefresh);\n    return {\n      token: result.token,\n    };\n  }\n\n  public async initialize(options?: InitializeOptions): Promise<void> {\n    if (options?.debugToken) {\n      self.FIREBASE_APPCHECK_DEBUG_TOKEN = options.debugToken;\n    } else if (options?.debug) {\n      self.FIREBASE_APPCHECK_DEBUG_TOKEN = true;\n    }\n    let provider = options?.provider;\n    if (!provider) {\n      if (!options?.siteKey) {\n        throw new Error(FirebaseAppCheckWeb.errorSiteKeyMissing);\n      }\n      const { ReCaptchaV3Provider } = await import('firebase/app-check');\n      provider = new ReCaptchaV3Provider(options?.siteKey);\n    }\n    const app = getApp();\n    this.appCheckInstance = initializeAppCheck(app, {\n      provider,\n      isTokenAutoRefreshEnabled: options?.isTokenAutoRefreshEnabled,\n    });\n  }\n\n  public async setTokenAutoRefreshEnabled(\n    options: SetTokenAutoRefreshEnabledOptions,\n  ): Promise<void> {\n    if (!this.appCheckInstance) {\n      throw new Error(FirebaseAppCheckWeb.errorNotInitialized);\n    }\n    setTokenAutoRefreshEnabled(this.appCheckInstance, options.enabled);\n  }\n\n  private registerOnTokenChangedListener(): void {\n    if (!this.appCheckInstance) {\n      return;\n    }\n    this.onTokenChangedListenerUnsubscribe = onTokenChanged(\n      this.appCheckInstance,\n      (tokenResult: AppCheckTokenResult) =>\n        this.handleTokenChanged(tokenResult.token),\n    );\n  }\n\n  private unregisterOnTokenChangedListener(): void {\n    if (this.onTokenChangedListenerUnsubscribe) {\n      this.onTokenChangedListenerUnsubscribe();\n    }\n  }\n\n  private handleTokenChanged(token: string): void {\n    const event: TokenChangedEvent = {\n      token,\n    };\n    this.notifyListeners(FirebaseAppCheckWeb.tokenChangedEvent, event);\n  }\n}\n"]}
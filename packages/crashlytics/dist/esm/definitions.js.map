{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["export interface FirebaseCrashlyticsPlugin {\n  /**\n   * Forces a crash to test the implementation.\n   *\n   * Only available for Android and iOS.\n   *\n   * @since 0.1.0\n   */\n  crash(options: CrashOptions): Promise<void>;\n  /**\n   * Sets a custom key and value that is associated with subsequent fatal and non-fatal reports.\n   *\n   * Only available for Android and iOS.\n   *\n   * @since 0.1.0\n   */\n  setCustomKey(options: SetCustomKeyOptions): Promise<void>;\n  /**\n   * Sets a user ID (identifier) that is associated with subsequent fatal and non-fatal reports.\n   *\n   * Only available for Android and iOS.\n   *\n   * @since 0.1.0\n   */\n  setUserId(options: SetUserIdOptions): Promise<void>;\n  /**\n   * Adds a custom log message that is sent with your crash data to give yourself more context for the events leading up to a crash.\n   *\n   * Only available for Android and iOS.\n   *\n   * @since 0.1.0\n   */\n  log(options: LogOptions): Promise<void>;\n  /**\n   * Enables/disables automatic data collection.\n   * The value does not apply until the next run of the app.\n   *\n   * Only available for Android and iOS.\n   *\n   * @since 0.1.0\n   */\n  setEnabled(options: SetEnabledOptions): Promise<void>;\n  /**\n   * Returns whether or not automatic data collection is enabled.\n   *\n   * Only available for iOS.\n   *\n   * @since 0.1.0\n   */\n  isEnabled(): Promise<IsEnabledResult>;\n  /**\n   * Returns whether the app crashed during the previous execution.\n   *\n   * Only available for Android and iOS.\n   *\n   * @since 0.1.0\n   */\n  didCrashOnPreviousExecution(): Promise<DidCrashOnPreviousExecutionResult>;\n  /**\n   * Uploads any unsent reports to Crashlytics at next startup.\n   *\n   * When automatic data collection is enabled, Crashlytics automatically uploads reports at startup.\n   *\n   * Only available for Android and iOS.\n   *\n   * @since 0.1.0\n   */\n  sendUnsentReports(): Promise<void>;\n  /**\n   * Deletes any unsent reports on the device.\n   *\n   * Only available for Android and iOS.\n   *\n   * @since 0.1.0\n   */\n  deleteUnsentReports(): Promise<void>;\n  /**\n   * Records a non-fatal report to send to Crashlytics.\n   *\n   * Only available for Android and iOS.\n   *\n   * @since 0.1.0\n   */\n  recordException(options: RecordExceptionOptions): Promise<void>;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface CrashOptions {\n  /**\n   * @since 0.1.0\n   */\n  message: string;\n}\n\n/**\n * @since 0.1.0\n */\nexport type SetCustomKeyOptions = CustomKeyAndValue;\n\n/**\n * @since 0.1.0\n */\nexport interface SetUserIdOptions {\n  /**\n   * @since 0.1.0\n   */\n  userId: string;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface LogOptions {\n  /**\n   * @since 0.1.0\n   */\n  message: string;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface SetEnabledOptions {\n  /**\n   * @since 0.1.0\n   */\n  enabled: boolean;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface IsEnabledResult {\n  /**\n   * @since 0.1.0\n   */\n  enabled: boolean;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface DidCrashOnPreviousExecutionResult {\n  /**\n   * @since 0.1.0\n   */\n  crashed: boolean;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface RecordExceptionOptions {\n  /**\n   * The message to record as a non-fatal exception.\n   *\n   * @since 0.1.0\n   */\n  message: string;\n  /**\n   * Error code within a specific error domain.\n   *\n   * **Attention:** This option is ignored on iOS if `stacktrace` is provided.\n   *\n   * Only available for iOS.\n   *\n   * @since 0.1.0\n   */\n  code?: number;\n  /**\n   * A string containing the error domain.\n   *\n   * **Attention:** This option is ignored on iOS if `stacktrace` is provided.\n   *\n   * Only available for iOS.\n   *\n   * @since 0.1.0\n   */\n  domain?: string;\n  /**\n   * An array of keys and the values to associate with the non fatal exception,\n   * in addition to the app level custom keys.\n   *\n   * **Attention:** This option is ignored on iOS if `stacktrace` is provided.\n   *\n   * @since 7.1.0\n   */\n  keysAndValues?: CustomKeyAndValue[];\n  /**\n   * A stacktrace generated by stacktrace.js.\n   *\n   * @since 1.1.0\n   */\n  stacktrace?: StackFrame[];\n}\n\n/**\n * @since 7.1.0\n */\nexport interface CustomKeyAndValue {\n  /**\n   * @since 7.1.0\n   */\n  key: string;\n  /**\n   * @since 7.1.0\n   */\n  value: string | number | boolean;\n  /**\n   * @since 7.1.0\n   */\n  type: 'string' | 'long' | 'double' | 'boolean' | 'int' | 'float';\n}\n\n/**\n * Subset of the Stacktrace generated by stacktrace.js.\n *\n * @since 1.1.0\n */\nexport interface StackFrame {\n  lineNumber?: number;\n  fileName?: string;\n  functionName?: string;\n}\n"]}
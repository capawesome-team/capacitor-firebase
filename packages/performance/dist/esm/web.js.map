{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport type { PerformanceTrace } from 'firebase/performance';\nimport { trace as createTrace, getPerformance } from 'firebase/performance';\n\nimport type {\n  FirebasePerformancePlugin,\n  GetAttributeOptions,\n  GetAttributeResult,\n  GetAttributesOptions,\n  GetAttributesResult,\n  GetMetricOptions,\n  GetMetricResult,\n  IncrementMetricOptions,\n  IsEnabledResult,\n  PutAttributeOptions,\n  PutMetricOptions,\n  RecordOptions,\n  RemoveAttributeOptions,\n  SetEnabledOptions,\n  StartTraceOptions,\n  StopTraceOptions,\n} from './definitions';\n\nexport class FirebasePerformanceWeb\n  extends WebPlugin\n  implements FirebasePerformancePlugin\n{\n  private static readonly ERROR_TRACE_NOT_FOUND =\n    'No trace was found with the provided traceName.';\n  private traces: { [key: string]: PerformanceTrace | undefined } = {};\n\n  public async startTrace(options: StartTraceOptions): Promise<void> {\n    const perf = getPerformance();\n    const trace = createTrace(perf, options.traceName);\n    trace.start();\n    this.traces[options.traceName] = trace;\n  }\n\n  public async stopTrace(options: StopTraceOptions): Promise<void> {\n    const trace = this.traces[options.traceName];\n    if (!trace) {\n      throw new Error(FirebasePerformanceWeb.ERROR_TRACE_NOT_FOUND);\n    }\n    trace.stop();\n    delete this.traces[options.traceName];\n  }\n\n  public async incrementMetric(options: IncrementMetricOptions): Promise<void> {\n    const trace = this.traces[options.traceName];\n    if (!trace) {\n      throw new Error(FirebasePerformanceWeb.ERROR_TRACE_NOT_FOUND);\n    }\n    trace.incrementMetric(options.metricName, options.incrementBy);\n  }\n\n  public async setEnabled(options: SetEnabledOptions): Promise<void> {\n    const perf = getPerformance();\n    perf.instrumentationEnabled = options.enabled;\n    perf.dataCollectionEnabled = options.enabled;\n  }\n\n  public async isEnabled(): Promise<IsEnabledResult> {\n    const perf = getPerformance();\n    const result: IsEnabledResult = {\n      enabled: perf.instrumentationEnabled || perf.dataCollectionEnabled,\n    };\n    return result;\n  }\n\n  public async putAttribute({\n    traceName,\n    attribute,\n    value,\n  }: PutAttributeOptions): Promise<void> {\n    const trace = this.traces[traceName];\n    if (!trace) {\n      throw new Error(FirebasePerformanceWeb.ERROR_TRACE_NOT_FOUND);\n    }\n    trace.putAttribute(attribute, value);\n    return;\n  }\n\n  public async getAttribute({\n    traceName,\n    attribute,\n  }: GetAttributeOptions): Promise<GetAttributeResult> {\n    const trace = this.traces[traceName];\n    if (!trace) {\n      throw new Error(FirebasePerformanceWeb.ERROR_TRACE_NOT_FOUND);\n    }\n    return { value: trace.getAttribute(attribute) ?? null };\n  }\n\n  public async getAttributes({\n    traceName,\n  }: GetAttributesOptions): Promise<GetAttributesResult> {\n    const trace = this.traces[traceName];\n    if (!trace) {\n      throw new Error(FirebasePerformanceWeb.ERROR_TRACE_NOT_FOUND);\n    }\n    return { attributes: trace.getAttributes() };\n  }\n\n  public async removeAttribute({\n    traceName,\n    attribute,\n  }: RemoveAttributeOptions): Promise<void> {\n    const trace = this.traces[traceName];\n    if (!trace) {\n      throw new Error(FirebasePerformanceWeb.ERROR_TRACE_NOT_FOUND);\n    }\n    trace.removeAttribute(attribute);\n  }\n\n  public async putMetric({\n    traceName,\n    metricName,\n    num,\n  }: PutMetricOptions): Promise<void> {\n    const trace = this.traces[traceName];\n    if (!trace) {\n      throw new Error(FirebasePerformanceWeb.ERROR_TRACE_NOT_FOUND);\n    }\n    trace.putMetric(metricName, num);\n  }\n\n  public async getMetric({\n    traceName,\n    metricName,\n  }: GetMetricOptions): Promise<GetMetricResult> {\n    const trace = this.traces[traceName];\n    if (!trace) {\n      throw new Error(FirebasePerformanceWeb.ERROR_TRACE_NOT_FOUND);\n    }\n    return { value: trace.getMetric(metricName) };\n  }\n\n  public async record({\n    traceName,\n    startTime,\n    duration,\n    options,\n  }: RecordOptions): Promise<void> {\n    const perf = getPerformance();\n    const trace = createTrace(perf, traceName);\n    trace.record(startTime, duration, options);\n  }\n}\n"]}